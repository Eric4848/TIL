// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
/**
 * @generated from enum livekit.AudioCodec
 */
export var AudioCodec;
(function (AudioCodec) {
    /**
     * @generated from enum value: DEFAULT_AC = 0;
     */
    AudioCodec[AudioCodec["DEFAULT_AC"] = 0] = "DEFAULT_AC";
    /**
     * @generated from enum value: OPUS = 1;
     */
    AudioCodec[AudioCodec["OPUS"] = 1] = "OPUS";
    /**
     * @generated from enum value: AAC = 2;
     */
    AudioCodec[AudioCodec["AAC"] = 2] = "AAC";
})(AudioCodec || (AudioCodec = {}));
// Retrieve enum metadata with: proto3.getEnumType(AudioCodec)
proto3.util.setEnumType(AudioCodec, "livekit.AudioCodec", [
    { no: 0, name: "DEFAULT_AC" },
    { no: 1, name: "OPUS" },
    { no: 2, name: "AAC" },
]);
/**
 * @generated from enum livekit.VideoCodec
 */
export var VideoCodec;
(function (VideoCodec) {
    /**
     * @generated from enum value: DEFAULT_VC = 0;
     */
    VideoCodec[VideoCodec["DEFAULT_VC"] = 0] = "DEFAULT_VC";
    /**
     * @generated from enum value: H264_BASELINE = 1;
     */
    VideoCodec[VideoCodec["H264_BASELINE"] = 1] = "H264_BASELINE";
    /**
     * @generated from enum value: H264_MAIN = 2;
     */
    VideoCodec[VideoCodec["H264_MAIN"] = 2] = "H264_MAIN";
    /**
     * @generated from enum value: H264_HIGH = 3;
     */
    VideoCodec[VideoCodec["H264_HIGH"] = 3] = "H264_HIGH";
    /**
     * @generated from enum value: VP8 = 4;
     */
    VideoCodec[VideoCodec["VP8"] = 4] = "VP8";
})(VideoCodec || (VideoCodec = {}));
// Retrieve enum metadata with: proto3.getEnumType(VideoCodec)
proto3.util.setEnumType(VideoCodec, "livekit.VideoCodec", [
    { no: 0, name: "DEFAULT_VC" },
    { no: 1, name: "H264_BASELINE" },
    { no: 2, name: "H264_MAIN" },
    { no: 3, name: "H264_HIGH" },
    { no: 4, name: "VP8" },
]);
/**
 * @generated from enum livekit.ImageCodec
 */
export var ImageCodec;
(function (ImageCodec) {
    /**
     * @generated from enum value: IC_DEFAULT = 0;
     */
    ImageCodec[ImageCodec["IC_DEFAULT"] = 0] = "IC_DEFAULT";
    /**
     * @generated from enum value: IC_JPEG = 1;
     */
    ImageCodec[ImageCodec["IC_JPEG"] = 1] = "IC_JPEG";
})(ImageCodec || (ImageCodec = {}));
// Retrieve enum metadata with: proto3.getEnumType(ImageCodec)
proto3.util.setEnumType(ImageCodec, "livekit.ImageCodec", [
    { no: 0, name: "IC_DEFAULT" },
    { no: 1, name: "IC_JPEG" },
]);
/**
 * @generated from enum livekit.TrackType
 */
export var TrackType;
(function (TrackType) {
    /**
     * @generated from enum value: AUDIO = 0;
     */
    TrackType[TrackType["AUDIO"] = 0] = "AUDIO";
    /**
     * @generated from enum value: VIDEO = 1;
     */
    TrackType[TrackType["VIDEO"] = 1] = "VIDEO";
    /**
     * @generated from enum value: DATA = 2;
     */
    TrackType[TrackType["DATA"] = 2] = "DATA";
})(TrackType || (TrackType = {}));
// Retrieve enum metadata with: proto3.getEnumType(TrackType)
proto3.util.setEnumType(TrackType, "livekit.TrackType", [
    { no: 0, name: "AUDIO" },
    { no: 1, name: "VIDEO" },
    { no: 2, name: "DATA" },
]);
/**
 * @generated from enum livekit.TrackSource
 */
export var TrackSource;
(function (TrackSource) {
    /**
     * @generated from enum value: UNKNOWN = 0;
     */
    TrackSource[TrackSource["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     * @generated from enum value: CAMERA = 1;
     */
    TrackSource[TrackSource["CAMERA"] = 1] = "CAMERA";
    /**
     * @generated from enum value: MICROPHONE = 2;
     */
    TrackSource[TrackSource["MICROPHONE"] = 2] = "MICROPHONE";
    /**
     * @generated from enum value: SCREEN_SHARE = 3;
     */
    TrackSource[TrackSource["SCREEN_SHARE"] = 3] = "SCREEN_SHARE";
    /**
     * @generated from enum value: SCREEN_SHARE_AUDIO = 4;
     */
    TrackSource[TrackSource["SCREEN_SHARE_AUDIO"] = 4] = "SCREEN_SHARE_AUDIO";
})(TrackSource || (TrackSource = {}));
// Retrieve enum metadata with: proto3.getEnumType(TrackSource)
proto3.util.setEnumType(TrackSource, "livekit.TrackSource", [
    { no: 0, name: "UNKNOWN" },
    { no: 1, name: "CAMERA" },
    { no: 2, name: "MICROPHONE" },
    { no: 3, name: "SCREEN_SHARE" },
    { no: 4, name: "SCREEN_SHARE_AUDIO" },
]);
/**
 * @generated from enum livekit.VideoQuality
 */
export var VideoQuality;
(function (VideoQuality) {
    /**
     * @generated from enum value: LOW = 0;
     */
    VideoQuality[VideoQuality["LOW"] = 0] = "LOW";
    /**
     * @generated from enum value: MEDIUM = 1;
     */
    VideoQuality[VideoQuality["MEDIUM"] = 1] = "MEDIUM";
    /**
     * @generated from enum value: HIGH = 2;
     */
    VideoQuality[VideoQuality["HIGH"] = 2] = "HIGH";
    /**
     * @generated from enum value: OFF = 3;
     */
    VideoQuality[VideoQuality["OFF"] = 3] = "OFF";
})(VideoQuality || (VideoQuality = {}));
// Retrieve enum metadata with: proto3.getEnumType(VideoQuality)
proto3.util.setEnumType(VideoQuality, "livekit.VideoQuality", [
    { no: 0, name: "LOW" },
    { no: 1, name: "MEDIUM" },
    { no: 2, name: "HIGH" },
    { no: 3, name: "OFF" },
]);
/**
 * @generated from enum livekit.ConnectionQuality
 */
export var ConnectionQuality;
(function (ConnectionQuality) {
    /**
     * @generated from enum value: POOR = 0;
     */
    ConnectionQuality[ConnectionQuality["POOR"] = 0] = "POOR";
    /**
     * @generated from enum value: GOOD = 1;
     */
    ConnectionQuality[ConnectionQuality["GOOD"] = 1] = "GOOD";
    /**
     * @generated from enum value: EXCELLENT = 2;
     */
    ConnectionQuality[ConnectionQuality["EXCELLENT"] = 2] = "EXCELLENT";
    /**
     * @generated from enum value: LOST = 3;
     */
    ConnectionQuality[ConnectionQuality["LOST"] = 3] = "LOST";
})(ConnectionQuality || (ConnectionQuality = {}));
// Retrieve enum metadata with: proto3.getEnumType(ConnectionQuality)
proto3.util.setEnumType(ConnectionQuality, "livekit.ConnectionQuality", [
    { no: 0, name: "POOR" },
    { no: 1, name: "GOOD" },
    { no: 2, name: "EXCELLENT" },
    { no: 3, name: "LOST" },
]);
/**
 * @generated from enum livekit.ClientConfigSetting
 */
export var ClientConfigSetting;
(function (ClientConfigSetting) {
    /**
     * @generated from enum value: UNSET = 0;
     */
    ClientConfigSetting[ClientConfigSetting["UNSET"] = 0] = "UNSET";
    /**
     * @generated from enum value: DISABLED = 1;
     */
    ClientConfigSetting[ClientConfigSetting["DISABLED"] = 1] = "DISABLED";
    /**
     * @generated from enum value: ENABLED = 2;
     */
    ClientConfigSetting[ClientConfigSetting["ENABLED"] = 2] = "ENABLED";
})(ClientConfigSetting || (ClientConfigSetting = {}));
// Retrieve enum metadata with: proto3.getEnumType(ClientConfigSetting)
proto3.util.setEnumType(ClientConfigSetting, "livekit.ClientConfigSetting", [
    { no: 0, name: "UNSET" },
    { no: 1, name: "DISABLED" },
    { no: 2, name: "ENABLED" },
]);
/**
 * @generated from enum livekit.DisconnectReason
 */
export var DisconnectReason;
(function (DisconnectReason) {
    /**
     * @generated from enum value: UNKNOWN_REASON = 0;
     */
    DisconnectReason[DisconnectReason["UNKNOWN_REASON"] = 0] = "UNKNOWN_REASON";
    /**
     * @generated from enum value: CLIENT_INITIATED = 1;
     */
    DisconnectReason[DisconnectReason["CLIENT_INITIATED"] = 1] = "CLIENT_INITIATED";
    /**
     * @generated from enum value: DUPLICATE_IDENTITY = 2;
     */
    DisconnectReason[DisconnectReason["DUPLICATE_IDENTITY"] = 2] = "DUPLICATE_IDENTITY";
    /**
     * @generated from enum value: SERVER_SHUTDOWN = 3;
     */
    DisconnectReason[DisconnectReason["SERVER_SHUTDOWN"] = 3] = "SERVER_SHUTDOWN";
    /**
     * @generated from enum value: PARTICIPANT_REMOVED = 4;
     */
    DisconnectReason[DisconnectReason["PARTICIPANT_REMOVED"] = 4] = "PARTICIPANT_REMOVED";
    /**
     * @generated from enum value: ROOM_DELETED = 5;
     */
    DisconnectReason[DisconnectReason["ROOM_DELETED"] = 5] = "ROOM_DELETED";
    /**
     * @generated from enum value: STATE_MISMATCH = 6;
     */
    DisconnectReason[DisconnectReason["STATE_MISMATCH"] = 6] = "STATE_MISMATCH";
    /**
     * @generated from enum value: JOIN_FAILURE = 7;
     */
    DisconnectReason[DisconnectReason["JOIN_FAILURE"] = 7] = "JOIN_FAILURE";
})(DisconnectReason || (DisconnectReason = {}));
// Retrieve enum metadata with: proto3.getEnumType(DisconnectReason)
proto3.util.setEnumType(DisconnectReason, "livekit.DisconnectReason", [
    { no: 0, name: "UNKNOWN_REASON" },
    { no: 1, name: "CLIENT_INITIATED" },
    { no: 2, name: "DUPLICATE_IDENTITY" },
    { no: 3, name: "SERVER_SHUTDOWN" },
    { no: 4, name: "PARTICIPANT_REMOVED" },
    { no: 5, name: "ROOM_DELETED" },
    { no: 6, name: "STATE_MISMATCH" },
    { no: 7, name: "JOIN_FAILURE" },
]);
/**
 * @generated from enum livekit.ReconnectReason
 */
export var ReconnectReason;
(function (ReconnectReason) {
    /**
     * @generated from enum value: RR_UNKNOWN = 0;
     */
    ReconnectReason[ReconnectReason["RR_UNKNOWN"] = 0] = "RR_UNKNOWN";
    /**
     * @generated from enum value: RR_SIGNAL_DISCONNECTED = 1;
     */
    ReconnectReason[ReconnectReason["RR_SIGNAL_DISCONNECTED"] = 1] = "RR_SIGNAL_DISCONNECTED";
    /**
     * @generated from enum value: RR_PUBLISHER_FAILED = 2;
     */
    ReconnectReason[ReconnectReason["RR_PUBLISHER_FAILED"] = 2] = "RR_PUBLISHER_FAILED";
    /**
     * @generated from enum value: RR_SUBSCRIBER_FAILED = 3;
     */
    ReconnectReason[ReconnectReason["RR_SUBSCRIBER_FAILED"] = 3] = "RR_SUBSCRIBER_FAILED";
    /**
     * @generated from enum value: RR_SWITCH_CANDIDATE = 4;
     */
    ReconnectReason[ReconnectReason["RR_SWITCH_CANDIDATE"] = 4] = "RR_SWITCH_CANDIDATE";
})(ReconnectReason || (ReconnectReason = {}));
// Retrieve enum metadata with: proto3.getEnumType(ReconnectReason)
proto3.util.setEnumType(ReconnectReason, "livekit.ReconnectReason", [
    { no: 0, name: "RR_UNKNOWN" },
    { no: 1, name: "RR_SIGNAL_DISCONNECTED" },
    { no: 2, name: "RR_PUBLISHER_FAILED" },
    { no: 3, name: "RR_SUBSCRIBER_FAILED" },
    { no: 4, name: "RR_SWITCH_CANDIDATE" },
]);
/**
 * @generated from enum livekit.SubscriptionError
 */
export var SubscriptionError;
(function (SubscriptionError) {
    /**
     * @generated from enum value: SE_UNKNOWN = 0;
     */
    SubscriptionError[SubscriptionError["SE_UNKNOWN"] = 0] = "SE_UNKNOWN";
    /**
     * @generated from enum value: SE_CODEC_UNSUPPORTED = 1;
     */
    SubscriptionError[SubscriptionError["SE_CODEC_UNSUPPORTED"] = 1] = "SE_CODEC_UNSUPPORTED";
    /**
     * @generated from enum value: SE_TRACK_NOTFOUND = 2;
     */
    SubscriptionError[SubscriptionError["SE_TRACK_NOTFOUND"] = 2] = "SE_TRACK_NOTFOUND";
})(SubscriptionError || (SubscriptionError = {}));
// Retrieve enum metadata with: proto3.getEnumType(SubscriptionError)
proto3.util.setEnumType(SubscriptionError, "livekit.SubscriptionError", [
    { no: 0, name: "SE_UNKNOWN" },
    { no: 1, name: "SE_CODEC_UNSUPPORTED" },
    { no: 2, name: "SE_TRACK_NOTFOUND" },
]);
/**
 * @generated from message livekit.Room
 */
export class Room extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sid = 1;
         */
        this.sid = "";
        /**
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * @generated from field: uint32 empty_timeout = 3;
         */
        this.emptyTimeout = 0;
        /**
         * @generated from field: uint32 max_participants = 4;
         */
        this.maxParticipants = 0;
        /**
         * @generated from field: int64 creation_time = 5;
         */
        this.creationTime = protoInt64.zero;
        /**
         * @generated from field: string turn_password = 6;
         */
        this.turnPassword = "";
        /**
         * @generated from field: repeated livekit.Codec enabled_codecs = 7;
         */
        this.enabledCodecs = [];
        /**
         * @generated from field: string metadata = 8;
         */
        this.metadata = "";
        /**
         * @generated from field: uint32 num_participants = 9;
         */
        this.numParticipants = 0;
        /**
         * @generated from field: uint32 num_publishers = 11;
         */
        this.numPublishers = 0;
        /**
         * @generated from field: bool active_recording = 10;
         */
        this.activeRecording = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Room().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Room().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Room().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Room, a, b);
    }
}
Room.runtime = proto3;
Room.typeName = "livekit.Room";
Room.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "empty_timeout", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "max_participants", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "creation_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "turn_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "enabled_codecs", kind: "message", T: Codec, repeated: true },
    { no: 8, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "num_participants", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 11, name: "num_publishers", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 10, name: "active_recording", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message livekit.Codec
 */
export class Codec extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string mime = 1;
         */
        this.mime = "";
        /**
         * @generated from field: string fmtp_line = 2;
         */
        this.fmtpLine = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Codec().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Codec().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Codec().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Codec, a, b);
    }
}
Codec.runtime = proto3;
Codec.typeName = "livekit.Codec";
Codec.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "mime", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fmtp_line", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.PlayoutDelay
 */
export class PlayoutDelay extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool enabled = 1;
         */
        this.enabled = false;
        /**
         * @generated from field: uint32 min = 2;
         */
        this.min = 0;
        /**
         * @generated from field: uint32 max = 3;
         */
        this.max = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PlayoutDelay().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PlayoutDelay().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PlayoutDelay().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PlayoutDelay, a, b);
    }
}
PlayoutDelay.runtime = proto3;
PlayoutDelay.typeName = "livekit.PlayoutDelay";
PlayoutDelay.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "min", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "max", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);
/**
 * @generated from message livekit.ParticipantPermission
 */
export class ParticipantPermission extends Message {
    constructor(data) {
        super();
        /**
         * allow participant to subscribe to other tracks in the room
         *
         * @generated from field: bool can_subscribe = 1;
         */
        this.canSubscribe = false;
        /**
         * allow participant to publish new tracks to room
         *
         * @generated from field: bool can_publish = 2;
         */
        this.canPublish = false;
        /**
         * allow participant to publish data
         *
         * @generated from field: bool can_publish_data = 3;
         */
        this.canPublishData = false;
        /**
         * sources that are allowed to be published
         *
         * @generated from field: repeated livekit.TrackSource can_publish_sources = 9;
         */
        this.canPublishSources = [];
        /**
         * indicates that it's hidden to others
         *
         * @generated from field: bool hidden = 7;
         */
        this.hidden = false;
        /**
         * indicates it's a recorder instance
         *
         * @generated from field: bool recorder = 8;
         */
        this.recorder = false;
        /**
         * indicates that participant can update own metadata
         *
         * @generated from field: bool can_update_metadata = 10;
         */
        this.canUpdateMetadata = false;
        /**
         * indicates that participant is an agent
         *
         * @generated from field: bool agent = 11;
         */
        this.agent = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ParticipantPermission().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ParticipantPermission().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ParticipantPermission().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ParticipantPermission, a, b);
    }
}
ParticipantPermission.runtime = proto3;
ParticipantPermission.typeName = "livekit.ParticipantPermission";
ParticipantPermission.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "can_subscribe", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "can_publish", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "can_publish_data", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "can_publish_sources", kind: "enum", T: proto3.getEnumType(TrackSource), repeated: true },
    { no: 7, name: "hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "recorder", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "can_update_metadata", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "agent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message livekit.ParticipantInfo
 */
export class ParticipantInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sid = 1;
         */
        this.sid = "";
        /**
         * @generated from field: string identity = 2;
         */
        this.identity = "";
        /**
         * @generated from field: livekit.ParticipantInfo.State state = 3;
         */
        this.state = ParticipantInfo_State.JOINING;
        /**
         * @generated from field: repeated livekit.TrackInfo tracks = 4;
         */
        this.tracks = [];
        /**
         * @generated from field: string metadata = 5;
         */
        this.metadata = "";
        /**
         * timestamp when participant joined room, in seconds
         *
         * @generated from field: int64 joined_at = 6;
         */
        this.joinedAt = protoInt64.zero;
        /**
         * @generated from field: string name = 9;
         */
        this.name = "";
        /**
         * @generated from field: uint32 version = 10;
         */
        this.version = 0;
        /**
         * @generated from field: string region = 12;
         */
        this.region = "";
        /**
         * indicates the participant has an active publisher connection
         * and can publish to the server
         *
         * @generated from field: bool is_publisher = 13;
         */
        this.isPublisher = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ParticipantInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ParticipantInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ParticipantInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ParticipantInfo, a, b);
    }
}
ParticipantInfo.runtime = proto3;
ParticipantInfo.typeName = "livekit.ParticipantInfo";
ParticipantInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "state", kind: "enum", T: proto3.getEnumType(ParticipantInfo_State) },
    { no: 4, name: "tracks", kind: "message", T: TrackInfo, repeated: true },
    { no: 5, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "joined_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 11, name: "permission", kind: "message", T: ParticipantPermission },
    { no: 12, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "is_publisher", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from enum livekit.ParticipantInfo.State
 */
export var ParticipantInfo_State;
(function (ParticipantInfo_State) {
    /**
     * websocket' connected, but not offered yet
     *
     * @generated from enum value: JOINING = 0;
     */
    ParticipantInfo_State[ParticipantInfo_State["JOINING"] = 0] = "JOINING";
    /**
     * server received client offer
     *
     * @generated from enum value: JOINED = 1;
     */
    ParticipantInfo_State[ParticipantInfo_State["JOINED"] = 1] = "JOINED";
    /**
     * ICE connectivity established
     *
     * @generated from enum value: ACTIVE = 2;
     */
    ParticipantInfo_State[ParticipantInfo_State["ACTIVE"] = 2] = "ACTIVE";
    /**
     * WS disconnected
     *
     * @generated from enum value: DISCONNECTED = 3;
     */
    ParticipantInfo_State[ParticipantInfo_State["DISCONNECTED"] = 3] = "DISCONNECTED";
})(ParticipantInfo_State || (ParticipantInfo_State = {}));
// Retrieve enum metadata with: proto3.getEnumType(ParticipantInfo_State)
proto3.util.setEnumType(ParticipantInfo_State, "livekit.ParticipantInfo.State", [
    { no: 0, name: "JOINING" },
    { no: 1, name: "JOINED" },
    { no: 2, name: "ACTIVE" },
    { no: 3, name: "DISCONNECTED" },
]);
/**
 * @generated from message livekit.Encryption
 */
export class Encryption extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Encryption().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Encryption().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Encryption().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Encryption, a, b);
    }
}
Encryption.runtime = proto3;
Encryption.typeName = "livekit.Encryption";
Encryption.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from enum livekit.Encryption.Type
 */
export var Encryption_Type;
(function (Encryption_Type) {
    /**
     * @generated from enum value: NONE = 0;
     */
    Encryption_Type[Encryption_Type["NONE"] = 0] = "NONE";
    /**
     * @generated from enum value: GCM = 1;
     */
    Encryption_Type[Encryption_Type["GCM"] = 1] = "GCM";
    /**
     * @generated from enum value: CUSTOM = 2;
     */
    Encryption_Type[Encryption_Type["CUSTOM"] = 2] = "CUSTOM";
})(Encryption_Type || (Encryption_Type = {}));
// Retrieve enum metadata with: proto3.getEnumType(Encryption_Type)
proto3.util.setEnumType(Encryption_Type, "livekit.Encryption.Type", [
    { no: 0, name: "NONE" },
    { no: 1, name: "GCM" },
    { no: 2, name: "CUSTOM" },
]);
/**
 * @generated from message livekit.SimulcastCodecInfo
 */
export class SimulcastCodecInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string mime_type = 1;
         */
        this.mimeType = "";
        /**
         * @generated from field: string mid = 2;
         */
        this.mid = "";
        /**
         * @generated from field: string cid = 3;
         */
        this.cid = "";
        /**
         * @generated from field: repeated livekit.VideoLayer layers = 4;
         */
        this.layers = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SimulcastCodecInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SimulcastCodecInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SimulcastCodecInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SimulcastCodecInfo, a, b);
    }
}
SimulcastCodecInfo.runtime = proto3;
SimulcastCodecInfo.typeName = "livekit.SimulcastCodecInfo";
SimulcastCodecInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "layers", kind: "message", T: VideoLayer, repeated: true },
]);
/**
 * @generated from message livekit.TrackInfo
 */
export class TrackInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sid = 1;
         */
        this.sid = "";
        /**
         * @generated from field: livekit.TrackType type = 2;
         */
        this.type = TrackType.AUDIO;
        /**
         * @generated from field: string name = 3;
         */
        this.name = "";
        /**
         * @generated from field: bool muted = 4;
         */
        this.muted = false;
        /**
         * original width of video (unset for audio)
         * clients may receive a lower resolution version with simulcast
         *
         * @generated from field: uint32 width = 5;
         */
        this.width = 0;
        /**
         * original height of video (unset for audio)
         *
         * @generated from field: uint32 height = 6;
         */
        this.height = 0;
        /**
         * true if track is simulcasted
         *
         * @generated from field: bool simulcast = 7;
         */
        this.simulcast = false;
        /**
         * true if DTX (Discontinuous Transmission) is disabled for audio
         *
         * @generated from field: bool disable_dtx = 8;
         */
        this.disableDtx = false;
        /**
         * source of media
         *
         * @generated from field: livekit.TrackSource source = 9;
         */
        this.source = TrackSource.UNKNOWN;
        /**
         * @generated from field: repeated livekit.VideoLayer layers = 10;
         */
        this.layers = [];
        /**
         * mime type of codec
         *
         * @generated from field: string mime_type = 11;
         */
        this.mimeType = "";
        /**
         * @generated from field: string mid = 12;
         */
        this.mid = "";
        /**
         * @generated from field: repeated livekit.SimulcastCodecInfo codecs = 13;
         */
        this.codecs = [];
        /**
         * @generated from field: bool stereo = 14;
         */
        this.stereo = false;
        /**
         * true if RED (Redundant Encoding) is disabled for audio
         *
         * @generated from field: bool disable_red = 15;
         */
        this.disableRed = false;
        /**
         * @generated from field: livekit.Encryption.Type encryption = 16;
         */
        this.encryption = Encryption_Type.NONE;
        /**
         * @generated from field: string stream = 17;
         */
        this.stream = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TrackInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TrackInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TrackInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TrackInfo, a, b);
    }
}
TrackInfo.runtime = proto3;
TrackInfo.typeName = "livekit.TrackInfo";
TrackInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(TrackType) },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "muted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "simulcast", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "disable_dtx", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "source", kind: "enum", T: proto3.getEnumType(TrackSource) },
    { no: 10, name: "layers", kind: "message", T: VideoLayer, repeated: true },
    { no: 11, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "mid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "codecs", kind: "message", T: SimulcastCodecInfo, repeated: true },
    { no: 14, name: "stereo", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "disable_red", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 16, name: "encryption", kind: "enum", T: proto3.getEnumType(Encryption_Type) },
    { no: 17, name: "stream", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * provide information about available spatial layers
 *
 * @generated from message livekit.VideoLayer
 */
export class VideoLayer extends Message {
    constructor(data) {
        super();
        /**
         * for tracks with a single layer, this should be HIGH
         *
         * @generated from field: livekit.VideoQuality quality = 1;
         */
        this.quality = VideoQuality.LOW;
        /**
         * @generated from field: uint32 width = 2;
         */
        this.width = 0;
        /**
         * @generated from field: uint32 height = 3;
         */
        this.height = 0;
        /**
         * target bitrate in bit per second (bps), server will measure actual
         *
         * @generated from field: uint32 bitrate = 4;
         */
        this.bitrate = 0;
        /**
         * @generated from field: uint32 ssrc = 5;
         */
        this.ssrc = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VideoLayer().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VideoLayer().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VideoLayer().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(VideoLayer, a, b);
    }
}
VideoLayer.runtime = proto3;
VideoLayer.typeName = "livekit.VideoLayer";
VideoLayer.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "quality", kind: "enum", T: proto3.getEnumType(VideoQuality) },
    { no: 2, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "bitrate", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "ssrc", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);
/**
 * new DataPacket API
 *
 * @generated from message livekit.DataPacket
 */
export class DataPacket extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: livekit.DataPacket.Kind kind = 1;
         */
        this.kind = DataPacket_Kind.RELIABLE;
        /**
         * @generated from oneof livekit.DataPacket.value
         */
        this.value = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DataPacket().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DataPacket().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DataPacket().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DataPacket, a, b);
    }
}
DataPacket.runtime = proto3;
DataPacket.typeName = "livekit.DataPacket";
DataPacket.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "enum", T: proto3.getEnumType(DataPacket_Kind) },
    { no: 2, name: "user", kind: "message", T: UserPacket, oneof: "value" },
    { no: 3, name: "speaker", kind: "message", T: ActiveSpeakerUpdate, oneof: "value" },
]);
/**
 * @generated from enum livekit.DataPacket.Kind
 */
export var DataPacket_Kind;
(function (DataPacket_Kind) {
    /**
     * @generated from enum value: RELIABLE = 0;
     */
    DataPacket_Kind[DataPacket_Kind["RELIABLE"] = 0] = "RELIABLE";
    /**
     * @generated from enum value: LOSSY = 1;
     */
    DataPacket_Kind[DataPacket_Kind["LOSSY"] = 1] = "LOSSY";
})(DataPacket_Kind || (DataPacket_Kind = {}));
// Retrieve enum metadata with: proto3.getEnumType(DataPacket_Kind)
proto3.util.setEnumType(DataPacket_Kind, "livekit.DataPacket.Kind", [
    { no: 0, name: "RELIABLE" },
    { no: 1, name: "LOSSY" },
]);
/**
 * @generated from message livekit.ActiveSpeakerUpdate
 */
export class ActiveSpeakerUpdate extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated livekit.SpeakerInfo speakers = 1;
         */
        this.speakers = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ActiveSpeakerUpdate().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ActiveSpeakerUpdate().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ActiveSpeakerUpdate().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ActiveSpeakerUpdate, a, b);
    }
}
ActiveSpeakerUpdate.runtime = proto3;
ActiveSpeakerUpdate.typeName = "livekit.ActiveSpeakerUpdate";
ActiveSpeakerUpdate.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "speakers", kind: "message", T: SpeakerInfo, repeated: true },
]);
/**
 * @generated from message livekit.SpeakerInfo
 */
export class SpeakerInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sid = 1;
         */
        this.sid = "";
        /**
         * audio level, 0-1.0, 1 is loudest
         *
         * @generated from field: float level = 2;
         */
        this.level = 0;
        /**
         * true if speaker is currently active
         *
         * @generated from field: bool active = 3;
         */
        this.active = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SpeakerInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SpeakerInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SpeakerInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SpeakerInfo, a, b);
    }
}
SpeakerInfo.runtime = proto3;
SpeakerInfo.typeName = "livekit.SpeakerInfo";
SpeakerInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "level", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message livekit.UserPacket
 */
export class UserPacket extends Message {
    constructor(data) {
        super();
        /**
         * participant ID of user that sent the message
         *
         * @generated from field: string participant_sid = 1;
         */
        this.participantSid = "";
        /**
         * @generated from field: string participant_identity = 5;
         */
        this.participantIdentity = "";
        /**
         * user defined payload
         *
         * @generated from field: bytes payload = 2;
         */
        this.payload = new Uint8Array(0);
        /**
         * the ID of the participants who will receive the message (sent to all by default)
         *
         * @generated from field: repeated string destination_sids = 3;
         */
        this.destinationSids = [];
        /**
         * identities of participants who will receive the message (sent to all by default)
         *
         * @generated from field: repeated string destination_identities = 6;
         */
        this.destinationIdentities = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UserPacket().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserPacket().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserPacket().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UserPacket, a, b);
    }
}
UserPacket.runtime = proto3;
UserPacket.typeName = "livekit.UserPacket";
UserPacket.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "payload", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "destination_sids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "destination_identities", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message livekit.ParticipantTracks
 */
export class ParticipantTracks extends Message {
    constructor(data) {
        super();
        /**
         * participant ID of participant to whom the tracks belong
         *
         * @generated from field: string participant_sid = 1;
         */
        this.participantSid = "";
        /**
         * @generated from field: repeated string track_sids = 2;
         */
        this.trackSids = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ParticipantTracks().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ParticipantTracks().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ParticipantTracks().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ParticipantTracks, a, b);
    }
}
ParticipantTracks.runtime = proto3;
ParticipantTracks.typeName = "livekit.ParticipantTracks";
ParticipantTracks.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "track_sids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * details about the server
 *
 * @generated from message livekit.ServerInfo
 */
export class ServerInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: livekit.ServerInfo.Edition edition = 1;
         */
        this.edition = ServerInfo_Edition.Standard;
        /**
         * @generated from field: string version = 2;
         */
        this.version = "";
        /**
         * @generated from field: int32 protocol = 3;
         */
        this.protocol = 0;
        /**
         * @generated from field: string region = 4;
         */
        this.region = "";
        /**
         * @generated from field: string node_id = 5;
         */
        this.nodeId = "";
        /**
         * additional debugging information. sent only if server is in development mode
         *
         * @generated from field: string debug_info = 6;
         */
        this.debugInfo = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ServerInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ServerInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ServerInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ServerInfo, a, b);
    }
}
ServerInfo.runtime = proto3;
ServerInfo.typeName = "livekit.ServerInfo";
ServerInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "edition", kind: "enum", T: proto3.getEnumType(ServerInfo_Edition) },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "protocol", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "debug_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from enum livekit.ServerInfo.Edition
 */
export var ServerInfo_Edition;
(function (ServerInfo_Edition) {
    /**
     * @generated from enum value: Standard = 0;
     */
    ServerInfo_Edition[ServerInfo_Edition["Standard"] = 0] = "Standard";
    /**
     * @generated from enum value: Cloud = 1;
     */
    ServerInfo_Edition[ServerInfo_Edition["Cloud"] = 1] = "Cloud";
})(ServerInfo_Edition || (ServerInfo_Edition = {}));
// Retrieve enum metadata with: proto3.getEnumType(ServerInfo_Edition)
proto3.util.setEnumType(ServerInfo_Edition, "livekit.ServerInfo.Edition", [
    { no: 0, name: "Standard" },
    { no: 1, name: "Cloud" },
]);
/**
 * details about the client
 *
 * @generated from message livekit.ClientInfo
 */
export class ClientInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: livekit.ClientInfo.SDK sdk = 1;
         */
        this.sdk = ClientInfo_SDK.UNKNOWN;
        /**
         * @generated from field: string version = 2;
         */
        this.version = "";
        /**
         * @generated from field: int32 protocol = 3;
         */
        this.protocol = 0;
        /**
         * @generated from field: string os = 4;
         */
        this.os = "";
        /**
         * @generated from field: string os_version = 5;
         */
        this.osVersion = "";
        /**
         * @generated from field: string device_model = 6;
         */
        this.deviceModel = "";
        /**
         * @generated from field: string browser = 7;
         */
        this.browser = "";
        /**
         * @generated from field: string browser_version = 8;
         */
        this.browserVersion = "";
        /**
         * @generated from field: string address = 9;
         */
        this.address = "";
        /**
         * wifi, wired, cellular, vpn, empty if not known
         *
         * @generated from field: string network = 10;
         */
        this.network = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClientInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClientInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClientInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClientInfo, a, b);
    }
}
ClientInfo.runtime = proto3;
ClientInfo.typeName = "livekit.ClientInfo";
ClientInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sdk", kind: "enum", T: proto3.getEnumType(ClientInfo_SDK) },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "protocol", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "os", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "os_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "device_model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "browser", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "browser_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from enum livekit.ClientInfo.SDK
 */
export var ClientInfo_SDK;
(function (ClientInfo_SDK) {
    /**
     * @generated from enum value: UNKNOWN = 0;
     */
    ClientInfo_SDK[ClientInfo_SDK["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     * @generated from enum value: JS = 1;
     */
    ClientInfo_SDK[ClientInfo_SDK["JS"] = 1] = "JS";
    /**
     * @generated from enum value: SWIFT = 2;
     */
    ClientInfo_SDK[ClientInfo_SDK["SWIFT"] = 2] = "SWIFT";
    /**
     * @generated from enum value: ANDROID = 3;
     */
    ClientInfo_SDK[ClientInfo_SDK["ANDROID"] = 3] = "ANDROID";
    /**
     * @generated from enum value: FLUTTER = 4;
     */
    ClientInfo_SDK[ClientInfo_SDK["FLUTTER"] = 4] = "FLUTTER";
    /**
     * @generated from enum value: GO = 5;
     */
    ClientInfo_SDK[ClientInfo_SDK["GO"] = 5] = "GO";
    /**
     * @generated from enum value: UNITY = 6;
     */
    ClientInfo_SDK[ClientInfo_SDK["UNITY"] = 6] = "UNITY";
    /**
     * @generated from enum value: REACT_NATIVE = 7;
     */
    ClientInfo_SDK[ClientInfo_SDK["REACT_NATIVE"] = 7] = "REACT_NATIVE";
    /**
     * @generated from enum value: RUST = 8;
     */
    ClientInfo_SDK[ClientInfo_SDK["RUST"] = 8] = "RUST";
    /**
     * @generated from enum value: PYTHON = 9;
     */
    ClientInfo_SDK[ClientInfo_SDK["PYTHON"] = 9] = "PYTHON";
    /**
     * @generated from enum value: CPP = 10;
     */
    ClientInfo_SDK[ClientInfo_SDK["CPP"] = 10] = "CPP";
})(ClientInfo_SDK || (ClientInfo_SDK = {}));
// Retrieve enum metadata with: proto3.getEnumType(ClientInfo_SDK)
proto3.util.setEnumType(ClientInfo_SDK, "livekit.ClientInfo.SDK", [
    { no: 0, name: "UNKNOWN" },
    { no: 1, name: "JS" },
    { no: 2, name: "SWIFT" },
    { no: 3, name: "ANDROID" },
    { no: 4, name: "FLUTTER" },
    { no: 5, name: "GO" },
    { no: 6, name: "UNITY" },
    { no: 7, name: "REACT_NATIVE" },
    { no: 8, name: "RUST" },
    { no: 9, name: "PYTHON" },
    { no: 10, name: "CPP" },
]);
/**
 * server provided client configuration
 *
 * @generated from message livekit.ClientConfiguration
 */
export class ClientConfiguration extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: livekit.ClientConfigSetting resume_connection = 3;
         */
        this.resumeConnection = ClientConfigSetting.UNSET;
        /**
         * @generated from field: livekit.ClientConfigSetting force_relay = 5;
         */
        this.forceRelay = ClientConfigSetting.UNSET;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClientConfiguration().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClientConfiguration().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClientConfiguration().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClientConfiguration, a, b);
    }
}
ClientConfiguration.runtime = proto3;
ClientConfiguration.typeName = "livekit.ClientConfiguration";
ClientConfiguration.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "video", kind: "message", T: VideoConfiguration },
    { no: 2, name: "screen", kind: "message", T: VideoConfiguration },
    { no: 3, name: "resume_connection", kind: "enum", T: proto3.getEnumType(ClientConfigSetting) },
    { no: 4, name: "disabled_codecs", kind: "message", T: DisabledCodecs },
    { no: 5, name: "force_relay", kind: "enum", T: proto3.getEnumType(ClientConfigSetting) },
]);
/**
 * @generated from message livekit.VideoConfiguration
 */
export class VideoConfiguration extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: livekit.ClientConfigSetting hardware_encoder = 1;
         */
        this.hardwareEncoder = ClientConfigSetting.UNSET;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VideoConfiguration().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VideoConfiguration().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VideoConfiguration().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(VideoConfiguration, a, b);
    }
}
VideoConfiguration.runtime = proto3;
VideoConfiguration.typeName = "livekit.VideoConfiguration";
VideoConfiguration.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "hardware_encoder", kind: "enum", T: proto3.getEnumType(ClientConfigSetting) },
]);
/**
 * @generated from message livekit.DisabledCodecs
 */
export class DisabledCodecs extends Message {
    constructor(data) {
        super();
        /**
         * disabled for both publish and subscribe
         *
         * @generated from field: repeated livekit.Codec codecs = 1;
         */
        this.codecs = [];
        /**
         * only disable for publish
         *
         * @generated from field: repeated livekit.Codec publish = 2;
         */
        this.publish = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DisabledCodecs().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DisabledCodecs().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DisabledCodecs().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DisabledCodecs, a, b);
    }
}
DisabledCodecs.runtime = proto3;
DisabledCodecs.typeName = "livekit.DisabledCodecs";
DisabledCodecs.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "codecs", kind: "message", T: Codec, repeated: true },
    { no: 2, name: "publish", kind: "message", T: Codec, repeated: true },
]);
/**
 * @generated from message livekit.RTPDrift
 */
export class RTPDrift extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: double duration = 3;
         */
        this.duration = 0;
        /**
         * @generated from field: uint64 start_timestamp = 4;
         */
        this.startTimestamp = protoInt64.zero;
        /**
         * @generated from field: uint64 end_timestamp = 5;
         */
        this.endTimestamp = protoInt64.zero;
        /**
         * @generated from field: uint64 rtp_clock_ticks = 6;
         */
        this.rtpClockTicks = protoInt64.zero;
        /**
         * @generated from field: int64 drift_samples = 7;
         */
        this.driftSamples = protoInt64.zero;
        /**
         * @generated from field: double drift_ms = 8;
         */
        this.driftMs = 0;
        /**
         * @generated from field: double clock_rate = 9;
         */
        this.clockRate = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RTPDrift().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RTPDrift().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RTPDrift().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RTPDrift, a, b);
    }
}
RTPDrift.runtime = proto3;
RTPDrift.typeName = "livekit.RTPDrift";
RTPDrift.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "start_time", kind: "message", T: Timestamp },
    { no: 2, name: "end_time", kind: "message", T: Timestamp },
    { no: 3, name: "duration", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "start_timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "end_timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "rtp_clock_ticks", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "drift_samples", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "drift_ms", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 9, name: "clock_rate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
]);
/**
 * @generated from message livekit.RTPStats
 */
export class RTPStats extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: double duration = 3;
         */
        this.duration = 0;
        /**
         * @generated from field: uint32 packets = 4;
         */
        this.packets = 0;
        /**
         * @generated from field: double packet_rate = 5;
         */
        this.packetRate = 0;
        /**
         * @generated from field: uint64 bytes = 6;
         */
        this.bytes = protoInt64.zero;
        /**
         * @generated from field: uint64 header_bytes = 39;
         */
        this.headerBytes = protoInt64.zero;
        /**
         * @generated from field: double bitrate = 7;
         */
        this.bitrate = 0;
        /**
         * @generated from field: uint32 packets_lost = 8;
         */
        this.packetsLost = 0;
        /**
         * @generated from field: double packet_loss_rate = 9;
         */
        this.packetLossRate = 0;
        /**
         * @generated from field: float packet_loss_percentage = 10;
         */
        this.packetLossPercentage = 0;
        /**
         * @generated from field: uint32 packets_duplicate = 11;
         */
        this.packetsDuplicate = 0;
        /**
         * @generated from field: double packet_duplicate_rate = 12;
         */
        this.packetDuplicateRate = 0;
        /**
         * @generated from field: uint64 bytes_duplicate = 13;
         */
        this.bytesDuplicate = protoInt64.zero;
        /**
         * @generated from field: uint64 header_bytes_duplicate = 40;
         */
        this.headerBytesDuplicate = protoInt64.zero;
        /**
         * @generated from field: double bitrate_duplicate = 14;
         */
        this.bitrateDuplicate = 0;
        /**
         * @generated from field: uint32 packets_padding = 15;
         */
        this.packetsPadding = 0;
        /**
         * @generated from field: double packet_padding_rate = 16;
         */
        this.packetPaddingRate = 0;
        /**
         * @generated from field: uint64 bytes_padding = 17;
         */
        this.bytesPadding = protoInt64.zero;
        /**
         * @generated from field: uint64 header_bytes_padding = 41;
         */
        this.headerBytesPadding = protoInt64.zero;
        /**
         * @generated from field: double bitrate_padding = 18;
         */
        this.bitratePadding = 0;
        /**
         * @generated from field: uint32 packets_out_of_order = 19;
         */
        this.packetsOutOfOrder = 0;
        /**
         * @generated from field: uint32 frames = 20;
         */
        this.frames = 0;
        /**
         * @generated from field: double frame_rate = 21;
         */
        this.frameRate = 0;
        /**
         * @generated from field: double jitter_current = 22;
         */
        this.jitterCurrent = 0;
        /**
         * @generated from field: double jitter_max = 23;
         */
        this.jitterMax = 0;
        /**
         * @generated from field: map<int32, uint32> gap_histogram = 24;
         */
        this.gapHistogram = {};
        /**
         * @generated from field: uint32 nacks = 25;
         */
        this.nacks = 0;
        /**
         * @generated from field: uint32 nack_acks = 37;
         */
        this.nackAcks = 0;
        /**
         * @generated from field: uint32 nack_misses = 26;
         */
        this.nackMisses = 0;
        /**
         * @generated from field: uint32 nack_repeated = 38;
         */
        this.nackRepeated = 0;
        /**
         * @generated from field: uint32 plis = 27;
         */
        this.plis = 0;
        /**
         * @generated from field: uint32 firs = 29;
         */
        this.firs = 0;
        /**
         * @generated from field: uint32 rtt_current = 31;
         */
        this.rttCurrent = 0;
        /**
         * @generated from field: uint32 rtt_max = 32;
         */
        this.rttMax = 0;
        /**
         * @generated from field: uint32 key_frames = 33;
         */
        this.keyFrames = 0;
        /**
         * @generated from field: uint32 layer_lock_plis = 35;
         */
        this.layerLockPlis = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RTPStats().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RTPStats().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RTPStats().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RTPStats, a, b);
    }
}
RTPStats.runtime = proto3;
RTPStats.typeName = "livekit.RTPStats";
RTPStats.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "start_time", kind: "message", T: Timestamp },
    { no: 2, name: "end_time", kind: "message", T: Timestamp },
    { no: 3, name: "duration", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "packets", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "packet_rate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 39, name: "header_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "bitrate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 8, name: "packets_lost", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 9, name: "packet_loss_rate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 10, name: "packet_loss_percentage", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 11, name: "packets_duplicate", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "packet_duplicate_rate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 13, name: "bytes_duplicate", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 40, name: "header_bytes_duplicate", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "bitrate_duplicate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 15, name: "packets_padding", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 16, name: "packet_padding_rate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 17, name: "bytes_padding", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 41, name: "header_bytes_padding", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "bitrate_padding", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 19, name: "packets_out_of_order", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 20, name: "frames", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 21, name: "frame_rate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 22, name: "jitter_current", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 23, name: "jitter_max", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 24, name: "gap_histogram", kind: "map", K: 5 /* ScalarType.INT32 */, V: { kind: "scalar", T: 13 /* ScalarType.UINT32 */ } },
    { no: 25, name: "nacks", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 37, name: "nack_acks", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 26, name: "nack_misses", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 38, name: "nack_repeated", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 27, name: "plis", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 28, name: "last_pli", kind: "message", T: Timestamp },
    { no: 29, name: "firs", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 30, name: "last_fir", kind: "message", T: Timestamp },
    { no: 31, name: "rtt_current", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 32, name: "rtt_max", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 33, name: "key_frames", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 34, name: "last_key_frame", kind: "message", T: Timestamp },
    { no: 35, name: "layer_lock_plis", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 36, name: "last_layer_lock_pli", kind: "message", T: Timestamp },
    { no: 44, name: "packet_drift", kind: "message", T: RTPDrift },
    { no: 45, name: "report_drift", kind: "message", T: RTPDrift },
]);
/**
 * @generated from message livekit.TimedVersion
 */
export class TimedVersion extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int64 unix_micro = 1;
         */
        this.unixMicro = protoInt64.zero;
        /**
         * @generated from field: int32 ticks = 2;
         */
        this.ticks = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TimedVersion().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TimedVersion().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TimedVersion().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TimedVersion, a, b);
    }
}
TimedVersion.runtime = proto3;
TimedVersion.typeName = "livekit.TimedVersion";
TimedVersion.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "unix_micro", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "ticks", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);
//# sourceMappingURL=livekit_models_pb.js.map