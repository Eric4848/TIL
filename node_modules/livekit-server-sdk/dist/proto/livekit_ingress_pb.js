// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { AudioCodec, TrackInfo, TrackSource, VideoCodec, VideoLayer } from "./livekit_models_pb.js";
/**
 * @generated from enum livekit.IngressInput
 */
export var IngressInput;
(function (IngressInput) {
    /**
     * @generated from enum value: RTMP_INPUT = 0;
     */
    IngressInput[IngressInput["RTMP_INPUT"] = 0] = "RTMP_INPUT";
    /**
     * @generated from enum value: WHIP_INPUT = 1;
     */
    IngressInput[IngressInput["WHIP_INPUT"] = 1] = "WHIP_INPUT";
    /**
     * Pull from the provided URL. Only HTTP url are supported, serving either a single media file or a HLS stream
     *
     * @generated from enum value: URL_INPUT = 2;
     */
    IngressInput[IngressInput["URL_INPUT"] = 2] = "URL_INPUT";
})(IngressInput || (IngressInput = {}));
// Retrieve enum metadata with: proto3.getEnumType(IngressInput)
proto3.util.setEnumType(IngressInput, "livekit.IngressInput", [
    { no: 0, name: "RTMP_INPUT" },
    { no: 1, name: "WHIP_INPUT" },
    { no: 2, name: "URL_INPUT" },
]);
/**
 * @generated from enum livekit.IngressAudioEncodingPreset
 */
export var IngressAudioEncodingPreset;
(function (IngressAudioEncodingPreset) {
    /**
     * OPUS, 2 channels, 96kbps
     *
     * @generated from enum value: OPUS_STEREO_96KBPS = 0;
     */
    IngressAudioEncodingPreset[IngressAudioEncodingPreset["OPUS_STEREO_96KBPS"] = 0] = "OPUS_STEREO_96KBPS";
    /**
     * OPUS, 1 channel, 64kbps
     *
     * @generated from enum value: OPUS_MONO_64KBS = 1;
     */
    IngressAudioEncodingPreset[IngressAudioEncodingPreset["OPUS_MONO_64KBS"] = 1] = "OPUS_MONO_64KBS";
})(IngressAudioEncodingPreset || (IngressAudioEncodingPreset = {}));
// Retrieve enum metadata with: proto3.getEnumType(IngressAudioEncodingPreset)
proto3.util.setEnumType(IngressAudioEncodingPreset, "livekit.IngressAudioEncodingPreset", [
    { no: 0, name: "OPUS_STEREO_96KBPS" },
    { no: 1, name: "OPUS_MONO_64KBS" },
]);
/**
 * @generated from enum livekit.IngressVideoEncodingPreset
 */
export var IngressVideoEncodingPreset;
(function (IngressVideoEncodingPreset) {
    /**
     * 1280x720,  30fps, 1900kbps main layer, 3 layers total
     *
     * @generated from enum value: H264_720P_30FPS_3_LAYERS = 0;
     */
    IngressVideoEncodingPreset[IngressVideoEncodingPreset["H264_720P_30FPS_3_LAYERS"] = 0] = "H264_720P_30FPS_3_LAYERS";
    /**
     * 1980x1080, 30fps, 3500kbps main layer, 3 layers total
     *
     * @generated from enum value: H264_1080P_30FPS_3_LAYERS = 1;
     */
    IngressVideoEncodingPreset[IngressVideoEncodingPreset["H264_1080P_30FPS_3_LAYERS"] = 1] = "H264_1080P_30FPS_3_LAYERS";
    /**
     *  960x540,  25fps, 1000kbps  main layer, 2 layers total
     *
     * @generated from enum value: H264_540P_25FPS_2_LAYERS = 2;
     */
    IngressVideoEncodingPreset[IngressVideoEncodingPreset["H264_540P_25FPS_2_LAYERS"] = 2] = "H264_540P_25FPS_2_LAYERS";
    /**
     * 1280x720,  30fps, 1900kbps, no simulcast
     *
     * @generated from enum value: H264_720P_30FPS_1_LAYER = 3;
     */
    IngressVideoEncodingPreset[IngressVideoEncodingPreset["H264_720P_30FPS_1_LAYER"] = 3] = "H264_720P_30FPS_1_LAYER";
    /**
     * 1980x1080, 30fps, 3500kbps, no simulcast
     *
     * @generated from enum value: H264_1080P_30FPS_1_LAYER = 4;
     */
    IngressVideoEncodingPreset[IngressVideoEncodingPreset["H264_1080P_30FPS_1_LAYER"] = 4] = "H264_1080P_30FPS_1_LAYER";
    /**
     * 1280x720,  30fps, 2500kbps main layer, 3 layers total, higher bitrate for high motion, harder to encode content
     *
     * @generated from enum value: H264_720P_30FPS_3_LAYERS_HIGH_MOTION = 5;
     */
    IngressVideoEncodingPreset[IngressVideoEncodingPreset["H264_720P_30FPS_3_LAYERS_HIGH_MOTION"] = 5] = "H264_720P_30FPS_3_LAYERS_HIGH_MOTION";
    /**
     * 1980x1080, 30fps, 4500kbps main layer, 3 layers total, higher bitrate for high motion, harder to encode content
     *
     * @generated from enum value: H264_1080P_30FPS_3_LAYERS_HIGH_MOTION = 6;
     */
    IngressVideoEncodingPreset[IngressVideoEncodingPreset["H264_1080P_30FPS_3_LAYERS_HIGH_MOTION"] = 6] = "H264_1080P_30FPS_3_LAYERS_HIGH_MOTION";
    /**
     *  960x540,  25fps, 1300kbps  main layer, 2 layers total, higher bitrate for high motion, harder to encode content
     *
     * @generated from enum value: H264_540P_25FPS_2_LAYERS_HIGH_MOTION = 7;
     */
    IngressVideoEncodingPreset[IngressVideoEncodingPreset["H264_540P_25FPS_2_LAYERS_HIGH_MOTION"] = 7] = "H264_540P_25FPS_2_LAYERS_HIGH_MOTION";
    /**
     * 1280x720,  30fps, 2500kbps, no simulcast, higher bitrate for high motion, harder to encode content
     *
     * @generated from enum value: H264_720P_30FPS_1_LAYER_HIGH_MOTION = 8;
     */
    IngressVideoEncodingPreset[IngressVideoEncodingPreset["H264_720P_30FPS_1_LAYER_HIGH_MOTION"] = 8] = "H264_720P_30FPS_1_LAYER_HIGH_MOTION";
    /**
     * 1980x1080, 30fps, 4500kbps, no simulcast, higher bitrate for high motion, harder to encode content
     *
     * @generated from enum value: H264_1080P_30FPS_1_LAYER_HIGH_MOTION = 9;
     */
    IngressVideoEncodingPreset[IngressVideoEncodingPreset["H264_1080P_30FPS_1_LAYER_HIGH_MOTION"] = 9] = "H264_1080P_30FPS_1_LAYER_HIGH_MOTION";
})(IngressVideoEncodingPreset || (IngressVideoEncodingPreset = {}));
// Retrieve enum metadata with: proto3.getEnumType(IngressVideoEncodingPreset)
proto3.util.setEnumType(IngressVideoEncodingPreset, "livekit.IngressVideoEncodingPreset", [
    { no: 0, name: "H264_720P_30FPS_3_LAYERS" },
    { no: 1, name: "H264_1080P_30FPS_3_LAYERS" },
    { no: 2, name: "H264_540P_25FPS_2_LAYERS" },
    { no: 3, name: "H264_720P_30FPS_1_LAYER" },
    { no: 4, name: "H264_1080P_30FPS_1_LAYER" },
    { no: 5, name: "H264_720P_30FPS_3_LAYERS_HIGH_MOTION" },
    { no: 6, name: "H264_1080P_30FPS_3_LAYERS_HIGH_MOTION" },
    { no: 7, name: "H264_540P_25FPS_2_LAYERS_HIGH_MOTION" },
    { no: 8, name: "H264_720P_30FPS_1_LAYER_HIGH_MOTION" },
    { no: 9, name: "H264_1080P_30FPS_1_LAYER_HIGH_MOTION" },
]);
/**
 * @generated from message livekit.CreateIngressRequest
 */
export class CreateIngressRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: livekit.IngressInput input_type = 1;
         */
        this.inputType = IngressInput.RTMP_INPUT;
        /**
         * Where to pull media from, only for URL input type
         *
         * @generated from field: string url = 9;
         */
        this.url = "";
        /**
         * User provided identifier for the ingress
         *
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * room to publish to
         *
         * @generated from field: string room_name = 3;
         */
        this.roomName = "";
        /**
         * publish as participant
         *
         * @generated from field: string participant_identity = 4;
         */
        this.participantIdentity = "";
        /**
         * name of publishing participant (used for display only)
         *
         * @generated from field: string participant_name = 5;
         */
        this.participantName = "";
        /**
         * whether to pass through the incoming media without transcoding, only compatible with some input types
         *
         * @generated from field: bool bypass_transcoding = 8;
         */
        this.bypassTranscoding = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateIngressRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateIngressRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateIngressRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CreateIngressRequest, a, b);
    }
}
CreateIngressRequest.runtime = proto3;
CreateIngressRequest.typeName = "livekit.CreateIngressRequest";
CreateIngressRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "input_type", kind: "enum", T: proto3.getEnumType(IngressInput) },
    { no: 9, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "room_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "participant_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "bypass_transcoding", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "audio", kind: "message", T: IngressAudioOptions },
    { no: 7, name: "video", kind: "message", T: IngressVideoOptions },
]);
/**
 * @generated from message livekit.IngressAudioOptions
 */
export class IngressAudioOptions extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * @generated from field: livekit.TrackSource source = 2;
         */
        this.source = TrackSource.UNKNOWN;
        /**
         * @generated from oneof livekit.IngressAudioOptions.encoding_options
         */
        this.encodingOptions = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IngressAudioOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IngressAudioOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IngressAudioOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(IngressAudioOptions, a, b);
    }
}
IngressAudioOptions.runtime = proto3;
IngressAudioOptions.typeName = "livekit.IngressAudioOptions";
IngressAudioOptions.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source", kind: "enum", T: proto3.getEnumType(TrackSource) },
    { no: 3, name: "preset", kind: "enum", T: proto3.getEnumType(IngressAudioEncodingPreset), oneof: "encoding_options" },
    { no: 4, name: "options", kind: "message", T: IngressAudioEncodingOptions, oneof: "encoding_options" },
]);
/**
 * @generated from message livekit.IngressVideoOptions
 */
export class IngressVideoOptions extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * @generated from field: livekit.TrackSource source = 2;
         */
        this.source = TrackSource.UNKNOWN;
        /**
         * @generated from oneof livekit.IngressVideoOptions.encoding_options
         */
        this.encodingOptions = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IngressVideoOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IngressVideoOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IngressVideoOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(IngressVideoOptions, a, b);
    }
}
IngressVideoOptions.runtime = proto3;
IngressVideoOptions.typeName = "livekit.IngressVideoOptions";
IngressVideoOptions.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source", kind: "enum", T: proto3.getEnumType(TrackSource) },
    { no: 3, name: "preset", kind: "enum", T: proto3.getEnumType(IngressVideoEncodingPreset), oneof: "encoding_options" },
    { no: 4, name: "options", kind: "message", T: IngressVideoEncodingOptions, oneof: "encoding_options" },
]);
/**
 * @generated from message livekit.IngressAudioEncodingOptions
 */
export class IngressAudioEncodingOptions extends Message {
    constructor(data) {
        super();
        /**
         * desired audio codec to publish to room
         *
         * @generated from field: livekit.AudioCodec audio_codec = 1;
         */
        this.audioCodec = AudioCodec.DEFAULT_AC;
        /**
         * @generated from field: uint32 bitrate = 2;
         */
        this.bitrate = 0;
        /**
         * @generated from field: bool disable_dtx = 3;
         */
        this.disableDtx = false;
        /**
         * @generated from field: uint32 channels = 4;
         */
        this.channels = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IngressAudioEncodingOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IngressAudioEncodingOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IngressAudioEncodingOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(IngressAudioEncodingOptions, a, b);
    }
}
IngressAudioEncodingOptions.runtime = proto3;
IngressAudioEncodingOptions.typeName = "livekit.IngressAudioEncodingOptions";
IngressAudioEncodingOptions.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "audio_codec", kind: "enum", T: proto3.getEnumType(AudioCodec) },
    { no: 2, name: "bitrate", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "disable_dtx", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "channels", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);
/**
 * @generated from message livekit.IngressVideoEncodingOptions
 */
export class IngressVideoEncodingOptions extends Message {
    constructor(data) {
        super();
        /**
         * desired codec to publish to room
         *
         * @generated from field: livekit.VideoCodec video_codec = 1;
         */
        this.videoCodec = VideoCodec.DEFAULT_VC;
        /**
         * @generated from field: double frame_rate = 2;
         */
        this.frameRate = 0;
        /**
         * simulcast layers to publish, when empty, should usually be set to layers at 1/2 and 1/4 of the dimensions
         *
         * @generated from field: repeated livekit.VideoLayer layers = 3;
         */
        this.layers = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IngressVideoEncodingOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IngressVideoEncodingOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IngressVideoEncodingOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(IngressVideoEncodingOptions, a, b);
    }
}
IngressVideoEncodingOptions.runtime = proto3;
IngressVideoEncodingOptions.typeName = "livekit.IngressVideoEncodingOptions";
IngressVideoEncodingOptions.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "video_codec", kind: "enum", T: proto3.getEnumType(VideoCodec) },
    { no: 2, name: "frame_rate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "layers", kind: "message", T: VideoLayer, repeated: true },
]);
/**
 * @generated from message livekit.IngressInfo
 */
export class IngressInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string ingress_id = 1;
         */
        this.ingressId = "";
        /**
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * @generated from field: string stream_key = 3;
         */
        this.streamKey = "";
        /**
         * URL to point the encoder to for push (RTMP, WHIP), or location to pull media from for pull (URL)
         *
         * @generated from field: string url = 4;
         */
        this.url = "";
        /**
         * for RTMP input, it'll be a rtmp:// URL
         * for FILE input, it'll be a http:// URL
         * for SRT input, it'll be a srt:// URL
         *
         * @generated from field: livekit.IngressInput input_type = 5;
         */
        this.inputType = IngressInput.RTMP_INPUT;
        /**
         * @generated from field: bool bypass_transcoding = 13;
         */
        this.bypassTranscoding = false;
        /**
         * @generated from field: string room_name = 8;
         */
        this.roomName = "";
        /**
         * @generated from field: string participant_identity = 9;
         */
        this.participantIdentity = "";
        /**
         * @generated from field: string participant_name = 10;
         */
        this.participantName = "";
        /**
         * @generated from field: bool reusable = 11;
         */
        this.reusable = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IngressInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IngressInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IngressInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(IngressInfo, a, b);
    }
}
IngressInfo.runtime = proto3;
IngressInfo.typeName = "livekit.IngressInfo";
IngressInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "ingress_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "stream_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "input_type", kind: "enum", T: proto3.getEnumType(IngressInput) },
    { no: 13, name: "bypass_transcoding", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "audio", kind: "message", T: IngressAudioOptions },
    { no: 7, name: "video", kind: "message", T: IngressVideoOptions },
    { no: 8, name: "room_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "participant_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "reusable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "state", kind: "message", T: IngressState },
]);
/**
 * @generated from message livekit.IngressState
 */
export class IngressState extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: livekit.IngressState.Status status = 1;
         */
        this.status = IngressState_Status.ENDPOINT_INACTIVE;
        /**
         * Error/non compliance description if any
         *
         * @generated from field: string error = 2;
         */
        this.error = "";
        /**
         * ID of the current/previous room published to
         *
         * @generated from field: string room_id = 5;
         */
        this.roomId = "";
        /**
         * @generated from field: int64 started_at = 7;
         */
        this.startedAt = protoInt64.zero;
        /**
         * @generated from field: int64 ended_at = 8;
         */
        this.endedAt = protoInt64.zero;
        /**
         * @generated from field: string resource_id = 9;
         */
        this.resourceId = "";
        /**
         * @generated from field: repeated livekit.TrackInfo tracks = 6;
         */
        this.tracks = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IngressState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IngressState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IngressState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(IngressState, a, b);
    }
}
IngressState.runtime = proto3;
IngressState.typeName = "livekit.IngressState";
IngressState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(IngressState_Status) },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "video", kind: "message", T: InputVideoState },
    { no: 4, name: "audio", kind: "message", T: InputAudioState },
    { no: 5, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "started_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "ended_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "resource_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tracks", kind: "message", T: TrackInfo, repeated: true },
]);
/**
 * @generated from enum livekit.IngressState.Status
 */
export var IngressState_Status;
(function (IngressState_Status) {
    /**
     * @generated from enum value: ENDPOINT_INACTIVE = 0;
     */
    IngressState_Status[IngressState_Status["ENDPOINT_INACTIVE"] = 0] = "ENDPOINT_INACTIVE";
    /**
     * @generated from enum value: ENDPOINT_BUFFERING = 1;
     */
    IngressState_Status[IngressState_Status["ENDPOINT_BUFFERING"] = 1] = "ENDPOINT_BUFFERING";
    /**
     * @generated from enum value: ENDPOINT_PUBLISHING = 2;
     */
    IngressState_Status[IngressState_Status["ENDPOINT_PUBLISHING"] = 2] = "ENDPOINT_PUBLISHING";
    /**
     * @generated from enum value: ENDPOINT_ERROR = 3;
     */
    IngressState_Status[IngressState_Status["ENDPOINT_ERROR"] = 3] = "ENDPOINT_ERROR";
    /**
     * @generated from enum value: ENDPOINT_COMPLETE = 4;
     */
    IngressState_Status[IngressState_Status["ENDPOINT_COMPLETE"] = 4] = "ENDPOINT_COMPLETE";
})(IngressState_Status || (IngressState_Status = {}));
// Retrieve enum metadata with: proto3.getEnumType(IngressState_Status)
proto3.util.setEnumType(IngressState_Status, "livekit.IngressState.Status", [
    { no: 0, name: "ENDPOINT_INACTIVE" },
    { no: 1, name: "ENDPOINT_BUFFERING" },
    { no: 2, name: "ENDPOINT_PUBLISHING" },
    { no: 3, name: "ENDPOINT_ERROR" },
    { no: 4, name: "ENDPOINT_COMPLETE" },
]);
/**
 * @generated from message livekit.InputVideoState
 */
export class InputVideoState extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string mime_type = 1;
         */
        this.mimeType = "";
        /**
         * @generated from field: uint32 average_bitrate = 2;
         */
        this.averageBitrate = 0;
        /**
         * @generated from field: uint32 width = 3;
         */
        this.width = 0;
        /**
         * @generated from field: uint32 height = 4;
         */
        this.height = 0;
        /**
         * @generated from field: double framerate = 5;
         */
        this.framerate = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InputVideoState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InputVideoState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InputVideoState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(InputVideoState, a, b);
    }
}
InputVideoState.runtime = proto3;
InputVideoState.typeName = "livekit.InputVideoState";
InputVideoState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "average_bitrate", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "framerate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
]);
/**
 * @generated from message livekit.InputAudioState
 */
export class InputAudioState extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string mime_type = 1;
         */
        this.mimeType = "";
        /**
         * @generated from field: uint32 average_bitrate = 2;
         */
        this.averageBitrate = 0;
        /**
         * @generated from field: uint32 channels = 3;
         */
        this.channels = 0;
        /**
         * @generated from field: uint32 sample_rate = 4;
         */
        this.sampleRate = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InputAudioState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InputAudioState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InputAudioState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(InputAudioState, a, b);
    }
}
InputAudioState.runtime = proto3;
InputAudioState.typeName = "livekit.InputAudioState";
InputAudioState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "average_bitrate", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "channels", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "sample_rate", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);
/**
 * @generated from message livekit.UpdateIngressRequest
 */
export class UpdateIngressRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string ingress_id = 1;
         */
        this.ingressId = "";
        /**
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * @generated from field: string room_name = 3;
         */
        this.roomName = "";
        /**
         * @generated from field: string participant_identity = 4;
         */
        this.participantIdentity = "";
        /**
         * @generated from field: string participant_name = 5;
         */
        this.participantName = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateIngressRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateIngressRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateIngressRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UpdateIngressRequest, a, b);
    }
}
UpdateIngressRequest.runtime = proto3;
UpdateIngressRequest.typeName = "livekit.UpdateIngressRequest";
UpdateIngressRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "ingress_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "room_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "participant_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "bypass_transcoding", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "audio", kind: "message", T: IngressAudioOptions },
    { no: 7, name: "video", kind: "message", T: IngressVideoOptions },
]);
/**
 * @generated from message livekit.ListIngressRequest
 */
export class ListIngressRequest extends Message {
    constructor(data) {
        super();
        /**
         * when blank, lists all ingress endpoints
         *
         * (optional, filter by room name)
         *
         * @generated from field: string room_name = 1;
         */
        this.roomName = "";
        /**
         * (optional, filter by ingress ID)
         *
         * @generated from field: string ingress_id = 2;
         */
        this.ingressId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListIngressRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListIngressRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListIngressRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ListIngressRequest, a, b);
    }
}
ListIngressRequest.runtime = proto3;
ListIngressRequest.typeName = "livekit.ListIngressRequest";
ListIngressRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "room_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ingress_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.ListIngressResponse
 */
export class ListIngressResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated livekit.IngressInfo items = 1;
         */
        this.items = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListIngressResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListIngressResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListIngressResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ListIngressResponse, a, b);
    }
}
ListIngressResponse.runtime = proto3;
ListIngressResponse.typeName = "livekit.ListIngressResponse";
ListIngressResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: IngressInfo, repeated: true },
]);
/**
 * @generated from message livekit.DeleteIngressRequest
 */
export class DeleteIngressRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string ingress_id = 1;
         */
        this.ingressId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteIngressRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteIngressRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteIngressRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DeleteIngressRequest, a, b);
    }
}
DeleteIngressRequest.runtime = proto3;
DeleteIngressRequest.typeName = "livekit.DeleteIngressRequest";
DeleteIngressRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "ingress_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
//# sourceMappingURL=livekit_ingress_pb.js.map