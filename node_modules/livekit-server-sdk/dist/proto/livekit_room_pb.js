// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import { Message, proto3 } from "@bufbuild/protobuf";
import { AutoParticipantEgress, AutoTrackEgress, RoomCompositeEgressRequest } from "./livekit_egress_pb.js";
import { DataPacket_Kind, ParticipantInfo, ParticipantPermission, ParticipantTracks, Room, TrackInfo } from "./livekit_models_pb.js";
/**
 * @generated from message livekit.CreateRoomRequest
 */
export class CreateRoomRequest extends Message {
    constructor(data) {
        super();
        /**
         * name of the room
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * number of seconds to keep the room open if no one joins
         *
         * @generated from field: uint32 empty_timeout = 2;
         */
        this.emptyTimeout = 0;
        /**
         * limit number of participants that can be in a room
         *
         * @generated from field: uint32 max_participants = 3;
         */
        this.maxParticipants = 0;
        /**
         * override the node room is allocated to, for debugging
         *
         * @generated from field: string node_id = 4;
         */
        this.nodeId = "";
        /**
         * metadata of room
         *
         * @generated from field: string metadata = 5;
         */
        this.metadata = "";
        /**
         * playout delay of subscriber
         *
         * @generated from field: uint32 min_playout_delay = 7;
         */
        this.minPlayoutDelay = 0;
        /**
         * @generated from field: uint32 max_playout_delay = 8;
         */
        this.maxPlayoutDelay = 0;
        /**
         * improves A/V sync when playout_delay set to a value larger than 200ms. It will disables transceiver re-use
         * so not recommended for rooms with frequent subscription changes
         *
         * @generated from field: bool sync_streams = 9;
         */
        this.syncStreams = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateRoomRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateRoomRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateRoomRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CreateRoomRequest, a, b);
    }
}
CreateRoomRequest.runtime = proto3;
CreateRoomRequest.typeName = "livekit.CreateRoomRequest";
CreateRoomRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "empty_timeout", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "max_participants", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "egress", kind: "message", T: RoomEgress },
    { no: 7, name: "min_playout_delay", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: "max_playout_delay", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 9, name: "sync_streams", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message livekit.RoomEgress
 */
export class RoomEgress extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RoomEgress().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RoomEgress().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RoomEgress().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RoomEgress, a, b);
    }
}
RoomEgress.runtime = proto3;
RoomEgress.typeName = "livekit.RoomEgress";
RoomEgress.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "room", kind: "message", T: RoomCompositeEgressRequest },
    { no: 3, name: "participant", kind: "message", T: AutoParticipantEgress },
    { no: 2, name: "tracks", kind: "message", T: AutoTrackEgress },
]);
/**
 * @generated from message livekit.ListRoomsRequest
 */
export class ListRoomsRequest extends Message {
    constructor(data) {
        super();
        /**
         * when set, will only return rooms with name match
         *
         * @generated from field: repeated string names = 1;
         */
        this.names = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListRoomsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListRoomsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListRoomsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ListRoomsRequest, a, b);
    }
}
ListRoomsRequest.runtime = proto3;
ListRoomsRequest.typeName = "livekit.ListRoomsRequest";
ListRoomsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message livekit.ListRoomsResponse
 */
export class ListRoomsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated livekit.Room rooms = 1;
         */
        this.rooms = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListRoomsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListRoomsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListRoomsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ListRoomsResponse, a, b);
    }
}
ListRoomsResponse.runtime = proto3;
ListRoomsResponse.typeName = "livekit.ListRoomsResponse";
ListRoomsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "rooms", kind: "message", T: Room, repeated: true },
]);
/**
 * @generated from message livekit.DeleteRoomRequest
 */
export class DeleteRoomRequest extends Message {
    constructor(data) {
        super();
        /**
         * name of the room
         *
         * @generated from field: string room = 1;
         */
        this.room = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteRoomRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteRoomRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteRoomRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DeleteRoomRequest, a, b);
    }
}
DeleteRoomRequest.runtime = proto3;
DeleteRoomRequest.typeName = "livekit.DeleteRoomRequest";
DeleteRoomRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "room", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.DeleteRoomResponse
 */
export class DeleteRoomResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteRoomResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteRoomResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteRoomResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DeleteRoomResponse, a, b);
    }
}
DeleteRoomResponse.runtime = proto3;
DeleteRoomResponse.typeName = "livekit.DeleteRoomResponse";
DeleteRoomResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message livekit.ListParticipantsRequest
 */
export class ListParticipantsRequest extends Message {
    constructor(data) {
        super();
        /**
         * name of the room
         *
         * @generated from field: string room = 1;
         */
        this.room = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListParticipantsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListParticipantsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListParticipantsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ListParticipantsRequest, a, b);
    }
}
ListParticipantsRequest.runtime = proto3;
ListParticipantsRequest.typeName = "livekit.ListParticipantsRequest";
ListParticipantsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "room", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.ListParticipantsResponse
 */
export class ListParticipantsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated livekit.ParticipantInfo participants = 1;
         */
        this.participants = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListParticipantsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListParticipantsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListParticipantsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ListParticipantsResponse, a, b);
    }
}
ListParticipantsResponse.runtime = proto3;
ListParticipantsResponse.typeName = "livekit.ListParticipantsResponse";
ListParticipantsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participants", kind: "message", T: ParticipantInfo, repeated: true },
]);
/**
 * @generated from message livekit.RoomParticipantIdentity
 */
export class RoomParticipantIdentity extends Message {
    constructor(data) {
        super();
        /**
         * name of the room
         *
         * @generated from field: string room = 1;
         */
        this.room = "";
        /**
         * identity of the participant
         *
         * @generated from field: string identity = 2;
         */
        this.identity = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RoomParticipantIdentity().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RoomParticipantIdentity().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RoomParticipantIdentity().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RoomParticipantIdentity, a, b);
    }
}
RoomParticipantIdentity.runtime = proto3;
RoomParticipantIdentity.typeName = "livekit.RoomParticipantIdentity";
RoomParticipantIdentity.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "room", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.RemoveParticipantResponse
 */
export class RemoveParticipantResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RemoveParticipantResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RemoveParticipantResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RemoveParticipantResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RemoveParticipantResponse, a, b);
    }
}
RemoveParticipantResponse.runtime = proto3;
RemoveParticipantResponse.typeName = "livekit.RemoveParticipantResponse";
RemoveParticipantResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message livekit.MuteRoomTrackRequest
 */
export class MuteRoomTrackRequest extends Message {
    constructor(data) {
        super();
        /**
         * name of the room
         *
         * @generated from field: string room = 1;
         */
        this.room = "";
        /**
         * @generated from field: string identity = 2;
         */
        this.identity = "";
        /**
         * sid of the track to mute
         *
         * @generated from field: string track_sid = 3;
         */
        this.trackSid = "";
        /**
         * set to true to mute, false to unmute
         *
         * @generated from field: bool muted = 4;
         */
        this.muted = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MuteRoomTrackRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MuteRoomTrackRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MuteRoomTrackRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MuteRoomTrackRequest, a, b);
    }
}
MuteRoomTrackRequest.runtime = proto3;
MuteRoomTrackRequest.typeName = "livekit.MuteRoomTrackRequest";
MuteRoomTrackRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "room", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "muted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message livekit.MuteRoomTrackResponse
 */
export class MuteRoomTrackResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MuteRoomTrackResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MuteRoomTrackResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MuteRoomTrackResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MuteRoomTrackResponse, a, b);
    }
}
MuteRoomTrackResponse.runtime = proto3;
MuteRoomTrackResponse.typeName = "livekit.MuteRoomTrackResponse";
MuteRoomTrackResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "track", kind: "message", T: TrackInfo },
]);
/**
 * @generated from message livekit.UpdateParticipantRequest
 */
export class UpdateParticipantRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string room = 1;
         */
        this.room = "";
        /**
         * @generated from field: string identity = 2;
         */
        this.identity = "";
        /**
         * metadata to update. skipping updates if left empty
         *
         * @generated from field: string metadata = 3;
         */
        this.metadata = "";
        /**
         * display name to update
         *
         * @generated from field: string name = 5;
         */
        this.name = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateParticipantRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateParticipantRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateParticipantRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UpdateParticipantRequest, a, b);
    }
}
UpdateParticipantRequest.runtime = proto3;
UpdateParticipantRequest.typeName = "livekit.UpdateParticipantRequest";
UpdateParticipantRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "room", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "permission", kind: "message", T: ParticipantPermission },
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.UpdateSubscriptionsRequest
 */
export class UpdateSubscriptionsRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string room = 1;
         */
        this.room = "";
        /**
         * @generated from field: string identity = 2;
         */
        this.identity = "";
        /**
         * list of sids of tracks
         *
         * @generated from field: repeated string track_sids = 3;
         */
        this.trackSids = [];
        /**
         * set to true to subscribe, false to unsubscribe from tracks
         *
         * @generated from field: bool subscribe = 4;
         */
        this.subscribe = false;
        /**
         * list of participants and their tracks
         *
         * @generated from field: repeated livekit.ParticipantTracks participant_tracks = 5;
         */
        this.participantTracks = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateSubscriptionsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateSubscriptionsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateSubscriptionsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UpdateSubscriptionsRequest, a, b);
    }
}
UpdateSubscriptionsRequest.runtime = proto3;
UpdateSubscriptionsRequest.typeName = "livekit.UpdateSubscriptionsRequest";
UpdateSubscriptionsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "room", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "track_sids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "subscribe", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "participant_tracks", kind: "message", T: ParticipantTracks, repeated: true },
]);
/**
 * empty for now
 *
 * @generated from message livekit.UpdateSubscriptionsResponse
 */
export class UpdateSubscriptionsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateSubscriptionsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateSubscriptionsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateSubscriptionsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UpdateSubscriptionsResponse, a, b);
    }
}
UpdateSubscriptionsResponse.runtime = proto3;
UpdateSubscriptionsResponse.typeName = "livekit.UpdateSubscriptionsResponse";
UpdateSubscriptionsResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message livekit.SendDataRequest
 */
export class SendDataRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string room = 1;
         */
        this.room = "";
        /**
         * @generated from field: bytes data = 2;
         */
        this.data = new Uint8Array(0);
        /**
         * @generated from field: livekit.DataPacket.Kind kind = 3;
         */
        this.kind = DataPacket_Kind.RELIABLE;
        /**
         * mark deprecated
         *
         * @generated from field: repeated string destination_sids = 4 [deprecated = true];
         * @deprecated
         */
        this.destinationSids = [];
        /**
         * when set, only forward to these identities
         *
         * @generated from field: repeated string destination_identities = 6;
         */
        this.destinationIdentities = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SendDataRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SendDataRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SendDataRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SendDataRequest, a, b);
    }
}
SendDataRequest.runtime = proto3;
SendDataRequest.typeName = "livekit.SendDataRequest";
SendDataRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "room", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "kind", kind: "enum", T: proto3.getEnumType(DataPacket_Kind) },
    { no: 4, name: "destination_sids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "destination_identities", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message livekit.SendDataResponse
 */
export class SendDataResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SendDataResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SendDataResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SendDataResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SendDataResponse, a, b);
    }
}
SendDataResponse.runtime = proto3;
SendDataResponse.typeName = "livekit.SendDataResponse";
SendDataResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message livekit.UpdateRoomMetadataRequest
 */
export class UpdateRoomMetadataRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string room = 1;
         */
        this.room = "";
        /**
         * metadata to update. skipping updates if left empty
         *
         * @generated from field: string metadata = 2;
         */
        this.metadata = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateRoomMetadataRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateRoomMetadataRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateRoomMetadataRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UpdateRoomMetadataRequest, a, b);
    }
}
UpdateRoomMetadataRequest.runtime = proto3;
UpdateRoomMetadataRequest.typeName = "livekit.UpdateRoomMetadataRequest";
UpdateRoomMetadataRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "room", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
//# sourceMappingURL=livekit_room_pb.js.map