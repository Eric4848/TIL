// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { AudioCodec, ImageCodec, VideoCodec } from "./livekit_models_pb.js";
/**
 * @generated from enum livekit.EncodedFileType
 */
export var EncodedFileType;
(function (EncodedFileType) {
    /**
     * file type chosen based on codecs
     *
     * @generated from enum value: DEFAULT_FILETYPE = 0;
     */
    EncodedFileType[EncodedFileType["DEFAULT_FILETYPE"] = 0] = "DEFAULT_FILETYPE";
    /**
     * @generated from enum value: MP4 = 1;
     */
    EncodedFileType[EncodedFileType["MP4"] = 1] = "MP4";
    /**
     * @generated from enum value: OGG = 2;
     */
    EncodedFileType[EncodedFileType["OGG"] = 2] = "OGG";
})(EncodedFileType || (EncodedFileType = {}));
// Retrieve enum metadata with: proto3.getEnumType(EncodedFileType)
proto3.util.setEnumType(EncodedFileType, "livekit.EncodedFileType", [
    { no: 0, name: "DEFAULT_FILETYPE" },
    { no: 1, name: "MP4" },
    { no: 2, name: "OGG" },
]);
/**
 * @generated from enum livekit.SegmentedFileProtocol
 */
export var SegmentedFileProtocol;
(function (SegmentedFileProtocol) {
    /**
     * @generated from enum value: DEFAULT_SEGMENTED_FILE_PROTOCOL = 0;
     */
    SegmentedFileProtocol[SegmentedFileProtocol["DEFAULT_SEGMENTED_FILE_PROTOCOL"] = 0] = "DEFAULT_SEGMENTED_FILE_PROTOCOL";
    /**
     * @generated from enum value: HLS_PROTOCOL = 1;
     */
    SegmentedFileProtocol[SegmentedFileProtocol["HLS_PROTOCOL"] = 1] = "HLS_PROTOCOL";
})(SegmentedFileProtocol || (SegmentedFileProtocol = {}));
// Retrieve enum metadata with: proto3.getEnumType(SegmentedFileProtocol)
proto3.util.setEnumType(SegmentedFileProtocol, "livekit.SegmentedFileProtocol", [
    { no: 0, name: "DEFAULT_SEGMENTED_FILE_PROTOCOL" },
    { no: 1, name: "HLS_PROTOCOL" },
]);
/**
 * @generated from enum livekit.SegmentedFileSuffix
 */
export var SegmentedFileSuffix;
(function (SegmentedFileSuffix) {
    /**
     * @generated from enum value: INDEX = 0;
     */
    SegmentedFileSuffix[SegmentedFileSuffix["INDEX"] = 0] = "INDEX";
    /**
     * @generated from enum value: TIMESTAMP = 1;
     */
    SegmentedFileSuffix[SegmentedFileSuffix["TIMESTAMP"] = 1] = "TIMESTAMP";
})(SegmentedFileSuffix || (SegmentedFileSuffix = {}));
// Retrieve enum metadata with: proto3.getEnumType(SegmentedFileSuffix)
proto3.util.setEnumType(SegmentedFileSuffix, "livekit.SegmentedFileSuffix", [
    { no: 0, name: "INDEX" },
    { no: 1, name: "TIMESTAMP" },
]);
/**
 * @generated from enum livekit.ImageFileSuffix
 */
export var ImageFileSuffix;
(function (ImageFileSuffix) {
    /**
     * @generated from enum value: IMAGE_SUFFIX_INDEX = 0;
     */
    ImageFileSuffix[ImageFileSuffix["IMAGE_SUFFIX_INDEX"] = 0] = "IMAGE_SUFFIX_INDEX";
    /**
     * @generated from enum value: IMAGE_SUFFIX_TIMESTAMP = 1;
     */
    ImageFileSuffix[ImageFileSuffix["IMAGE_SUFFIX_TIMESTAMP"] = 1] = "IMAGE_SUFFIX_TIMESTAMP";
})(ImageFileSuffix || (ImageFileSuffix = {}));
// Retrieve enum metadata with: proto3.getEnumType(ImageFileSuffix)
proto3.util.setEnumType(ImageFileSuffix, "livekit.ImageFileSuffix", [
    { no: 0, name: "IMAGE_SUFFIX_INDEX" },
    { no: 1, name: "IMAGE_SUFFIX_TIMESTAMP" },
]);
/**
 * @generated from enum livekit.StreamProtocol
 */
export var StreamProtocol;
(function (StreamProtocol) {
    /**
     * protocol chosen based on urls
     *
     * @generated from enum value: DEFAULT_PROTOCOL = 0;
     */
    StreamProtocol[StreamProtocol["DEFAULT_PROTOCOL"] = 0] = "DEFAULT_PROTOCOL";
    /**
     * @generated from enum value: RTMP = 1;
     */
    StreamProtocol[StreamProtocol["RTMP"] = 1] = "RTMP";
})(StreamProtocol || (StreamProtocol = {}));
// Retrieve enum metadata with: proto3.getEnumType(StreamProtocol)
proto3.util.setEnumType(StreamProtocol, "livekit.StreamProtocol", [
    { no: 0, name: "DEFAULT_PROTOCOL" },
    { no: 1, name: "RTMP" },
]);
/**
 * @generated from enum livekit.EncodingOptionsPreset
 */
export var EncodingOptionsPreset;
(function (EncodingOptionsPreset) {
    /**
     *  1280x720, 30fps, 3000kpbs, H.264_MAIN / OPUS
     *
     * @generated from enum value: H264_720P_30 = 0;
     */
    EncodingOptionsPreset[EncodingOptionsPreset["H264_720P_30"] = 0] = "H264_720P_30";
    /**
     *  1280x720, 60fps, 4500kbps, H.264_MAIN / OPUS
     *
     * @generated from enum value: H264_720P_60 = 1;
     */
    EncodingOptionsPreset[EncodingOptionsPreset["H264_720P_60"] = 1] = "H264_720P_60";
    /**
     * 1920x1080, 30fps, 4500kbps, H.264_MAIN / OPUS
     *
     * @generated from enum value: H264_1080P_30 = 2;
     */
    EncodingOptionsPreset[EncodingOptionsPreset["H264_1080P_30"] = 2] = "H264_1080P_30";
    /**
     * 1920x1080, 60fps, 6000kbps, H.264_MAIN / OPUS
     *
     * @generated from enum value: H264_1080P_60 = 3;
     */
    EncodingOptionsPreset[EncodingOptionsPreset["H264_1080P_60"] = 3] = "H264_1080P_60";
    /**
     *  720x1280, 30fps, 3000kpbs, H.264_MAIN / OPUS
     *
     * @generated from enum value: PORTRAIT_H264_720P_30 = 4;
     */
    EncodingOptionsPreset[EncodingOptionsPreset["PORTRAIT_H264_720P_30"] = 4] = "PORTRAIT_H264_720P_30";
    /**
     *  720x1280, 60fps, 4500kbps, H.264_MAIN / OPUS
     *
     * @generated from enum value: PORTRAIT_H264_720P_60 = 5;
     */
    EncodingOptionsPreset[EncodingOptionsPreset["PORTRAIT_H264_720P_60"] = 5] = "PORTRAIT_H264_720P_60";
    /**
     * 1080x1920, 30fps, 4500kbps, H.264_MAIN / OPUS
     *
     * @generated from enum value: PORTRAIT_H264_1080P_30 = 6;
     */
    EncodingOptionsPreset[EncodingOptionsPreset["PORTRAIT_H264_1080P_30"] = 6] = "PORTRAIT_H264_1080P_30";
    /**
     * 1080x1920, 60fps, 6000kbps, H.264_MAIN / OPUS
     *
     * @generated from enum value: PORTRAIT_H264_1080P_60 = 7;
     */
    EncodingOptionsPreset[EncodingOptionsPreset["PORTRAIT_H264_1080P_60"] = 7] = "PORTRAIT_H264_1080P_60";
})(EncodingOptionsPreset || (EncodingOptionsPreset = {}));
// Retrieve enum metadata with: proto3.getEnumType(EncodingOptionsPreset)
proto3.util.setEnumType(EncodingOptionsPreset, "livekit.EncodingOptionsPreset", [
    { no: 0, name: "H264_720P_30" },
    { no: 1, name: "H264_720P_60" },
    { no: 2, name: "H264_1080P_30" },
    { no: 3, name: "H264_1080P_60" },
    { no: 4, name: "PORTRAIT_H264_720P_30" },
    { no: 5, name: "PORTRAIT_H264_720P_60" },
    { no: 6, name: "PORTRAIT_H264_1080P_30" },
    { no: 7, name: "PORTRAIT_H264_1080P_60" },
]);
/**
 * @generated from enum livekit.EgressStatus
 */
export var EgressStatus;
(function (EgressStatus) {
    /**
     * @generated from enum value: EGRESS_STARTING = 0;
     */
    EgressStatus[EgressStatus["EGRESS_STARTING"] = 0] = "EGRESS_STARTING";
    /**
     * @generated from enum value: EGRESS_ACTIVE = 1;
     */
    EgressStatus[EgressStatus["EGRESS_ACTIVE"] = 1] = "EGRESS_ACTIVE";
    /**
     * @generated from enum value: EGRESS_ENDING = 2;
     */
    EgressStatus[EgressStatus["EGRESS_ENDING"] = 2] = "EGRESS_ENDING";
    /**
     * @generated from enum value: EGRESS_COMPLETE = 3;
     */
    EgressStatus[EgressStatus["EGRESS_COMPLETE"] = 3] = "EGRESS_COMPLETE";
    /**
     * @generated from enum value: EGRESS_FAILED = 4;
     */
    EgressStatus[EgressStatus["EGRESS_FAILED"] = 4] = "EGRESS_FAILED";
    /**
     * @generated from enum value: EGRESS_ABORTED = 5;
     */
    EgressStatus[EgressStatus["EGRESS_ABORTED"] = 5] = "EGRESS_ABORTED";
    /**
     * @generated from enum value: EGRESS_LIMIT_REACHED = 6;
     */
    EgressStatus[EgressStatus["EGRESS_LIMIT_REACHED"] = 6] = "EGRESS_LIMIT_REACHED";
})(EgressStatus || (EgressStatus = {}));
// Retrieve enum metadata with: proto3.getEnumType(EgressStatus)
proto3.util.setEnumType(EgressStatus, "livekit.EgressStatus", [
    { no: 0, name: "EGRESS_STARTING" },
    { no: 1, name: "EGRESS_ACTIVE" },
    { no: 2, name: "EGRESS_ENDING" },
    { no: 3, name: "EGRESS_COMPLETE" },
    { no: 4, name: "EGRESS_FAILED" },
    { no: 5, name: "EGRESS_ABORTED" },
    { no: 6, name: "EGRESS_LIMIT_REACHED" },
]);
/**
 * composite using a web browser
 *
 * @generated from message livekit.RoomCompositeEgressRequest
 */
export class RoomCompositeEgressRequest extends Message {
    constructor(data) {
        super();
        /**
         * required
         *
         * @generated from field: string room_name = 1;
         */
        this.roomName = "";
        /**
         * (optional)
         *
         * @generated from field: string layout = 2;
         */
        this.layout = "";
        /**
         * (default false)
         *
         * @generated from field: bool audio_only = 3;
         */
        this.audioOnly = false;
        /**
         * (default false)
         *
         * @generated from field: bool video_only = 4;
         */
        this.videoOnly = false;
        /**
         * template base url (default https://recorder.livekit.io)
         *
         * @generated from field: string custom_base_url = 5;
         */
        this.customBaseUrl = "";
        /**
         * deprecated (use _output fields)
         *
         * @generated from oneof livekit.RoomCompositeEgressRequest.output
         */
        this.output = { case: undefined };
        /**
         * @generated from oneof livekit.RoomCompositeEgressRequest.options
         */
        this.options = { case: undefined };
        /**
         * @generated from field: repeated livekit.EncodedFileOutput file_outputs = 11;
         */
        this.fileOutputs = [];
        /**
         * @generated from field: repeated livekit.StreamOutput stream_outputs = 12;
         */
        this.streamOutputs = [];
        /**
         * @generated from field: repeated livekit.SegmentedFileOutput segment_outputs = 13;
         */
        this.segmentOutputs = [];
        /**
         * @generated from field: repeated livekit.ImageOutput image_outputs = 14;
         */
        this.imageOutputs = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RoomCompositeEgressRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RoomCompositeEgressRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RoomCompositeEgressRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RoomCompositeEgressRequest, a, b);
    }
}
RoomCompositeEgressRequest.runtime = proto3;
RoomCompositeEgressRequest.typeName = "livekit.RoomCompositeEgressRequest";
RoomCompositeEgressRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "room_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "layout", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "audio_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "video_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "custom_base_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "file", kind: "message", T: EncodedFileOutput, oneof: "output" },
    { no: 7, name: "stream", kind: "message", T: StreamOutput, oneof: "output" },
    { no: 10, name: "segments", kind: "message", T: SegmentedFileOutput, oneof: "output" },
    { no: 8, name: "preset", kind: "enum", T: proto3.getEnumType(EncodingOptionsPreset), oneof: "options" },
    { no: 9, name: "advanced", kind: "message", T: EncodingOptions, oneof: "options" },
    { no: 11, name: "file_outputs", kind: "message", T: EncodedFileOutput, repeated: true },
    { no: 12, name: "stream_outputs", kind: "message", T: StreamOutput, repeated: true },
    { no: 13, name: "segment_outputs", kind: "message", T: SegmentedFileOutput, repeated: true },
    { no: 14, name: "image_outputs", kind: "message", T: ImageOutput, repeated: true },
]);
/**
 * record any website
 *
 * @generated from message livekit.WebEgressRequest
 */
export class WebEgressRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string url = 1;
         */
        this.url = "";
        /**
         * @generated from field: bool audio_only = 2;
         */
        this.audioOnly = false;
        /**
         * @generated from field: bool video_only = 3;
         */
        this.videoOnly = false;
        /**
         * @generated from field: bool await_start_signal = 12;
         */
        this.awaitStartSignal = false;
        /**
         * deprecated (use _output fields)
         *
         * @generated from oneof livekit.WebEgressRequest.output
         */
        this.output = { case: undefined };
        /**
         * @generated from oneof livekit.WebEgressRequest.options
         */
        this.options = { case: undefined };
        /**
         * @generated from field: repeated livekit.EncodedFileOutput file_outputs = 9;
         */
        this.fileOutputs = [];
        /**
         * @generated from field: repeated livekit.StreamOutput stream_outputs = 10;
         */
        this.streamOutputs = [];
        /**
         * @generated from field: repeated livekit.SegmentedFileOutput segment_outputs = 11;
         */
        this.segmentOutputs = [];
        /**
         * @generated from field: repeated livekit.ImageOutput image_outputs = 13;
         */
        this.imageOutputs = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new WebEgressRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new WebEgressRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new WebEgressRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(WebEgressRequest, a, b);
    }
}
WebEgressRequest.runtime = proto3;
WebEgressRequest.typeName = "livekit.WebEgressRequest";
WebEgressRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "audio_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "video_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "await_start_signal", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "file", kind: "message", T: EncodedFileOutput, oneof: "output" },
    { no: 5, name: "stream", kind: "message", T: StreamOutput, oneof: "output" },
    { no: 6, name: "segments", kind: "message", T: SegmentedFileOutput, oneof: "output" },
    { no: 7, name: "preset", kind: "enum", T: proto3.getEnumType(EncodingOptionsPreset), oneof: "options" },
    { no: 8, name: "advanced", kind: "message", T: EncodingOptions, oneof: "options" },
    { no: 9, name: "file_outputs", kind: "message", T: EncodedFileOutput, repeated: true },
    { no: 10, name: "stream_outputs", kind: "message", T: StreamOutput, repeated: true },
    { no: 11, name: "segment_outputs", kind: "message", T: SegmentedFileOutput, repeated: true },
    { no: 13, name: "image_outputs", kind: "message", T: ImageOutput, repeated: true },
]);
/**
 * record audio and video from a single participant
 *
 * @generated from message livekit.ParticipantEgressRequest
 */
export class ParticipantEgressRequest extends Message {
    constructor(data) {
        super();
        /**
         * required
         *
         * @generated from field: string room_name = 1;
         */
        this.roomName = "";
        /**
         * required
         *
         * @generated from field: string identity = 2;
         */
        this.identity = "";
        /**
         * (default false)
         *
         * @generated from field: bool screen_share = 3;
         */
        this.screenShare = false;
        /**
         * @generated from oneof livekit.ParticipantEgressRequest.options
         */
        this.options = { case: undefined };
        /**
         * @generated from field: repeated livekit.EncodedFileOutput file_outputs = 6;
         */
        this.fileOutputs = [];
        /**
         * @generated from field: repeated livekit.StreamOutput stream_outputs = 7;
         */
        this.streamOutputs = [];
        /**
         * @generated from field: repeated livekit.SegmentedFileOutput segment_outputs = 8;
         */
        this.segmentOutputs = [];
        /**
         * @generated from field: repeated livekit.ImageOutput image_outputs = 9;
         */
        this.imageOutputs = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ParticipantEgressRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ParticipantEgressRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ParticipantEgressRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ParticipantEgressRequest, a, b);
    }
}
ParticipantEgressRequest.runtime = proto3;
ParticipantEgressRequest.typeName = "livekit.ParticipantEgressRequest";
ParticipantEgressRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "room_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "screen_share", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "preset", kind: "enum", T: proto3.getEnumType(EncodingOptionsPreset), oneof: "options" },
    { no: 5, name: "advanced", kind: "message", T: EncodingOptions, oneof: "options" },
    { no: 6, name: "file_outputs", kind: "message", T: EncodedFileOutput, repeated: true },
    { no: 7, name: "stream_outputs", kind: "message", T: StreamOutput, repeated: true },
    { no: 8, name: "segment_outputs", kind: "message", T: SegmentedFileOutput, repeated: true },
    { no: 9, name: "image_outputs", kind: "message", T: ImageOutput, repeated: true },
]);
/**
 * containerize up to one audio and one video track
 *
 * @generated from message livekit.TrackCompositeEgressRequest
 */
export class TrackCompositeEgressRequest extends Message {
    constructor(data) {
        super();
        /**
         * required
         *
         * @generated from field: string room_name = 1;
         */
        this.roomName = "";
        /**
         * (optional)
         *
         * @generated from field: string audio_track_id = 2;
         */
        this.audioTrackId = "";
        /**
         * (optional)
         *
         * @generated from field: string video_track_id = 3;
         */
        this.videoTrackId = "";
        /**
         * deprecated (use _output fields)
         *
         * @generated from oneof livekit.TrackCompositeEgressRequest.output
         */
        this.output = { case: undefined };
        /**
         * @generated from oneof livekit.TrackCompositeEgressRequest.options
         */
        this.options = { case: undefined };
        /**
         * @generated from field: repeated livekit.EncodedFileOutput file_outputs = 11;
         */
        this.fileOutputs = [];
        /**
         * @generated from field: repeated livekit.StreamOutput stream_outputs = 12;
         */
        this.streamOutputs = [];
        /**
         * @generated from field: repeated livekit.SegmentedFileOutput segment_outputs = 13;
         */
        this.segmentOutputs = [];
        /**
         * @generated from field: repeated livekit.ImageOutput image_outputs = 14;
         */
        this.imageOutputs = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TrackCompositeEgressRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TrackCompositeEgressRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TrackCompositeEgressRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TrackCompositeEgressRequest, a, b);
    }
}
TrackCompositeEgressRequest.runtime = proto3;
TrackCompositeEgressRequest.typeName = "livekit.TrackCompositeEgressRequest";
TrackCompositeEgressRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "room_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "audio_track_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "video_track_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "file", kind: "message", T: EncodedFileOutput, oneof: "output" },
    { no: 5, name: "stream", kind: "message", T: StreamOutput, oneof: "output" },
    { no: 8, name: "segments", kind: "message", T: SegmentedFileOutput, oneof: "output" },
    { no: 6, name: "preset", kind: "enum", T: proto3.getEnumType(EncodingOptionsPreset), oneof: "options" },
    { no: 7, name: "advanced", kind: "message", T: EncodingOptions, oneof: "options" },
    { no: 11, name: "file_outputs", kind: "message", T: EncodedFileOutput, repeated: true },
    { no: 12, name: "stream_outputs", kind: "message", T: StreamOutput, repeated: true },
    { no: 13, name: "segment_outputs", kind: "message", T: SegmentedFileOutput, repeated: true },
    { no: 14, name: "image_outputs", kind: "message", T: ImageOutput, repeated: true },
]);
/**
 * record tracks individually, without transcoding
 *
 * @generated from message livekit.TrackEgressRequest
 */
export class TrackEgressRequest extends Message {
    constructor(data) {
        super();
        /**
         * required
         *
         * @generated from field: string room_name = 1;
         */
        this.roomName = "";
        /**
         * required
         *
         * @generated from field: string track_id = 2;
         */
        this.trackId = "";
        /**
         * required
         *
         * @generated from oneof livekit.TrackEgressRequest.output
         */
        this.output = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TrackEgressRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TrackEgressRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TrackEgressRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TrackEgressRequest, a, b);
    }
}
TrackEgressRequest.runtime = proto3;
TrackEgressRequest.typeName = "livekit.TrackEgressRequest";
TrackEgressRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "room_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "track_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "file", kind: "message", T: DirectFileOutput, oneof: "output" },
    { no: 4, name: "websocket_url", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "output" },
]);
/**
 * @generated from message livekit.EncodedFileOutput
 */
export class EncodedFileOutput extends Message {
    constructor(data) {
        super();
        /**
         * (optional)
         *
         * @generated from field: livekit.EncodedFileType file_type = 1;
         */
        this.fileType = EncodedFileType.DEFAULT_FILETYPE;
        /**
         * see egress docs for templating (default {room_name}-{time})
         *
         * @generated from field: string filepath = 2;
         */
        this.filepath = "";
        /**
         * disable upload of manifest file (default false)
         *
         * @generated from field: bool disable_manifest = 6;
         */
        this.disableManifest = false;
        /**
         * @generated from oneof livekit.EncodedFileOutput.output
         */
        this.output = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EncodedFileOutput().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EncodedFileOutput().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EncodedFileOutput().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EncodedFileOutput, a, b);
    }
}
EncodedFileOutput.runtime = proto3;
EncodedFileOutput.typeName = "livekit.EncodedFileOutput";
EncodedFileOutput.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "file_type", kind: "enum", T: proto3.getEnumType(EncodedFileType) },
    { no: 2, name: "filepath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "disable_manifest", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "s3", kind: "message", T: S3Upload, oneof: "output" },
    { no: 4, name: "gcp", kind: "message", T: GCPUpload, oneof: "output" },
    { no: 5, name: "azure", kind: "message", T: AzureBlobUpload, oneof: "output" },
    { no: 7, name: "aliOSS", kind: "message", T: AliOSSUpload, oneof: "output" },
]);
/**
 * Used to generate HLS segments or other kind of segmented output
 *
 * @generated from message livekit.SegmentedFileOutput
 */
export class SegmentedFileOutput extends Message {
    constructor(data) {
        super();
        /**
         * (optional)
         *
         * @generated from field: livekit.SegmentedFileProtocol protocol = 1;
         */
        this.protocol = SegmentedFileProtocol.DEFAULT_SEGMENTED_FILE_PROTOCOL;
        /**
         * (optional)
         *
         * @generated from field: string filename_prefix = 2;
         */
        this.filenamePrefix = "";
        /**
         * (optional)
         *
         * @generated from field: string playlist_name = 3;
         */
        this.playlistName = "";
        /**
         * (optional, disabled if not provided). Path of a live playlist
         *
         * @generated from field: string live_playlist_name = 11;
         */
        this.livePlaylistName = "";
        /**
         * in seconds (optional)
         *
         * @generated from field: uint32 segment_duration = 4;
         */
        this.segmentDuration = 0;
        /**
         * (optional, default INDEX)
         *
         * @generated from field: livekit.SegmentedFileSuffix filename_suffix = 10;
         */
        this.filenameSuffix = SegmentedFileSuffix.INDEX;
        /**
         * disable upload of manifest file (default false)
         *
         * @generated from field: bool disable_manifest = 8;
         */
        this.disableManifest = false;
        /**
         * required
         *
         * @generated from oneof livekit.SegmentedFileOutput.output
         */
        this.output = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SegmentedFileOutput().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SegmentedFileOutput().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SegmentedFileOutput().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SegmentedFileOutput, a, b);
    }
}
SegmentedFileOutput.runtime = proto3;
SegmentedFileOutput.typeName = "livekit.SegmentedFileOutput";
SegmentedFileOutput.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "protocol", kind: "enum", T: proto3.getEnumType(SegmentedFileProtocol) },
    { no: 2, name: "filename_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "playlist_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "live_playlist_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "segment_duration", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 10, name: "filename_suffix", kind: "enum", T: proto3.getEnumType(SegmentedFileSuffix) },
    { no: 8, name: "disable_manifest", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "s3", kind: "message", T: S3Upload, oneof: "output" },
    { no: 6, name: "gcp", kind: "message", T: GCPUpload, oneof: "output" },
    { no: 7, name: "azure", kind: "message", T: AzureBlobUpload, oneof: "output" },
    { no: 9, name: "aliOSS", kind: "message", T: AliOSSUpload, oneof: "output" },
]);
/**
 * @generated from message livekit.DirectFileOutput
 */
export class DirectFileOutput extends Message {
    constructor(data) {
        super();
        /**
         * see egress docs for templating (default {track_id}-{time})
         *
         * @generated from field: string filepath = 1;
         */
        this.filepath = "";
        /**
         * disable upload of manifest file (default false)
         *
         * @generated from field: bool disable_manifest = 5;
         */
        this.disableManifest = false;
        /**
         * @generated from oneof livekit.DirectFileOutput.output
         */
        this.output = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DirectFileOutput().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DirectFileOutput().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DirectFileOutput().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DirectFileOutput, a, b);
    }
}
DirectFileOutput.runtime = proto3;
DirectFileOutput.typeName = "livekit.DirectFileOutput";
DirectFileOutput.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "filepath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "disable_manifest", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "s3", kind: "message", T: S3Upload, oneof: "output" },
    { no: 3, name: "gcp", kind: "message", T: GCPUpload, oneof: "output" },
    { no: 4, name: "azure", kind: "message", T: AzureBlobUpload, oneof: "output" },
    { no: 6, name: "aliOSS", kind: "message", T: AliOSSUpload, oneof: "output" },
]);
/**
 * @generated from message livekit.ImageOutput
 */
export class ImageOutput extends Message {
    constructor(data) {
        super();
        /**
         * in seconds (required)
         *
         * @generated from field: uint32 capture_interval = 1;
         */
        this.captureInterval = 0;
        /**
         * (optional, defaults to track width)
         *
         * @generated from field: int32 width = 2;
         */
        this.width = 0;
        /**
         * (optional, defaults to track height)
         *
         * @generated from field: int32 height = 3;
         */
        this.height = 0;
        /**
         * (optional)
         *
         * @generated from field: string filename_prefix = 4;
         */
        this.filenamePrefix = "";
        /**
         * (optional, default INDEX)
         *
         * @generated from field: livekit.ImageFileSuffix filename_suffix = 5;
         */
        this.filenameSuffix = ImageFileSuffix.IMAGE_SUFFIX_INDEX;
        /**
         * (optional)
         *
         * @generated from field: livekit.ImageCodec image_codec = 6;
         */
        this.imageCodec = ImageCodec.IC_DEFAULT;
        /**
         * disable upload of manifest file (default false)
         *
         * @generated from field: bool disable_manifest = 7;
         */
        this.disableManifest = false;
        /**
         * required
         *
         * @generated from oneof livekit.ImageOutput.output
         */
        this.output = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ImageOutput().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ImageOutput().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ImageOutput().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ImageOutput, a, b);
    }
}
ImageOutput.runtime = proto3;
ImageOutput.typeName = "livekit.ImageOutput";
ImageOutput.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "capture_interval", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "width", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "height", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "filename_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "filename_suffix", kind: "enum", T: proto3.getEnumType(ImageFileSuffix) },
    { no: 6, name: "image_codec", kind: "enum", T: proto3.getEnumType(ImageCodec) },
    { no: 7, name: "disable_manifest", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "s3", kind: "message", T: S3Upload, oneof: "output" },
    { no: 9, name: "gcp", kind: "message", T: GCPUpload, oneof: "output" },
    { no: 10, name: "azure", kind: "message", T: AzureBlobUpload, oneof: "output" },
    { no: 11, name: "aliOSS", kind: "message", T: AliOSSUpload, oneof: "output" },
]);
/**
 * @generated from message livekit.S3Upload
 */
export class S3Upload extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string access_key = 1;
         */
        this.accessKey = "";
        /**
         * @generated from field: string secret = 2;
         */
        this.secret = "";
        /**
         * @generated from field: string region = 3;
         */
        this.region = "";
        /**
         * @generated from field: string endpoint = 4;
         */
        this.endpoint = "";
        /**
         * @generated from field: string bucket = 5;
         */
        this.bucket = "";
        /**
         * @generated from field: bool force_path_style = 6;
         */
        this.forcePathStyle = false;
        /**
         * @generated from field: map<string, string> metadata = 7;
         */
        this.metadata = {};
        /**
         * @generated from field: string tagging = 8;
         */
        this.tagging = "";
        /**
         * Content-Disposition header
         *
         * @generated from field: string content_disposition = 9;
         */
        this.contentDisposition = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new S3Upload().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new S3Upload().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new S3Upload().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(S3Upload, a, b);
    }
}
S3Upload.runtime = proto3;
S3Upload.typeName = "livekit.S3Upload";
S3Upload.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "access_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "force_path_style", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
    { no: 8, name: "tagging", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "content_disposition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.GCPUpload
 */
export class GCPUpload extends Message {
    constructor(data) {
        super();
        /**
         * service account credentials serialized in JSON "credentials.json"
         *
         * @generated from field: string credentials = 1;
         */
        this.credentials = "";
        /**
         * @generated from field: string bucket = 2;
         */
        this.bucket = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GCPUpload().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GCPUpload().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GCPUpload().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GCPUpload, a, b);
    }
}
GCPUpload.runtime = proto3;
GCPUpload.typeName = "livekit.GCPUpload";
GCPUpload.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "credentials", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.AzureBlobUpload
 */
export class AzureBlobUpload extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string account_name = 1;
         */
        this.accountName = "";
        /**
         * @generated from field: string account_key = 2;
         */
        this.accountKey = "";
        /**
         * @generated from field: string container_name = 3;
         */
        this.containerName = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AzureBlobUpload().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AzureBlobUpload().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AzureBlobUpload().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AzureBlobUpload, a, b);
    }
}
AzureBlobUpload.runtime = proto3;
AzureBlobUpload.typeName = "livekit.AzureBlobUpload";
AzureBlobUpload.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "account_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "container_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.AliOSSUpload
 */
export class AliOSSUpload extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string access_key = 1;
         */
        this.accessKey = "";
        /**
         * @generated from field: string secret = 2;
         */
        this.secret = "";
        /**
         * @generated from field: string region = 3;
         */
        this.region = "";
        /**
         * @generated from field: string endpoint = 4;
         */
        this.endpoint = "";
        /**
         * @generated from field: string bucket = 5;
         */
        this.bucket = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AliOSSUpload().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AliOSSUpload().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AliOSSUpload().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AliOSSUpload, a, b);
    }
}
AliOSSUpload.runtime = proto3;
AliOSSUpload.typeName = "livekit.AliOSSUpload";
AliOSSUpload.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "access_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.StreamOutput
 */
export class StreamOutput extends Message {
    constructor(data) {
        super();
        /**
         * required
         *
         * @generated from field: livekit.StreamProtocol protocol = 1;
         */
        this.protocol = StreamProtocol.DEFAULT_PROTOCOL;
        /**
         * required
         *
         * @generated from field: repeated string urls = 2;
         */
        this.urls = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StreamOutput().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StreamOutput().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StreamOutput().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(StreamOutput, a, b);
    }
}
StreamOutput.runtime = proto3;
StreamOutput.typeName = "livekit.StreamOutput";
StreamOutput.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "protocol", kind: "enum", T: proto3.getEnumType(StreamProtocol) },
    { no: 2, name: "urls", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message livekit.EncodingOptions
 */
export class EncodingOptions extends Message {
    constructor(data) {
        super();
        /**
         * (default 1920)
         *
         * @generated from field: int32 width = 1;
         */
        this.width = 0;
        /**
         * (default 1080)
         *
         * @generated from field: int32 height = 2;
         */
        this.height = 0;
        /**
         * (default 24)
         *
         * @generated from field: int32 depth = 3;
         */
        this.depth = 0;
        /**
         * (default 30)
         *
         * @generated from field: int32 framerate = 4;
         */
        this.framerate = 0;
        /**
         * (default OPUS)
         *
         * @generated from field: livekit.AudioCodec audio_codec = 5;
         */
        this.audioCodec = AudioCodec.DEFAULT_AC;
        /**
         * (default 128)
         *
         * @generated from field: int32 audio_bitrate = 6;
         */
        this.audioBitrate = 0;
        /**
         * quality setting on audio encoder
         *
         * @generated from field: int32 audio_quality = 11;
         */
        this.audioQuality = 0;
        /**
         * (default 44100)
         *
         * @generated from field: int32 audio_frequency = 7;
         */
        this.audioFrequency = 0;
        /**
         * (default H264_MAIN)
         *
         * @generated from field: livekit.VideoCodec video_codec = 8;
         */
        this.videoCodec = VideoCodec.DEFAULT_VC;
        /**
         * (default 4500)
         *
         * @generated from field: int32 video_bitrate = 9;
         */
        this.videoBitrate = 0;
        /**
         * quality setting on video encoder
         *
         * @generated from field: int32 video_quality = 12;
         */
        this.videoQuality = 0;
        /**
         * in seconds (default 4s for streaming, segment duration for segmented output, encoder default for files)
         *
         * @generated from field: double key_frame_interval = 10;
         */
        this.keyFrameInterval = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EncodingOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EncodingOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EncodingOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EncodingOptions, a, b);
    }
}
EncodingOptions.runtime = proto3;
EncodingOptions.typeName = "livekit.EncodingOptions";
EncodingOptions.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "width", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "height", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "depth", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "framerate", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "audio_codec", kind: "enum", T: proto3.getEnumType(AudioCodec) },
    { no: 6, name: "audio_bitrate", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "audio_quality", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "audio_frequency", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "video_codec", kind: "enum", T: proto3.getEnumType(VideoCodec) },
    { no: 9, name: "video_bitrate", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "video_quality", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "key_frame_interval", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
]);
/**
 * @generated from message livekit.UpdateLayoutRequest
 */
export class UpdateLayoutRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string egress_id = 1;
         */
        this.egressId = "";
        /**
         * @generated from field: string layout = 2;
         */
        this.layout = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateLayoutRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateLayoutRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateLayoutRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UpdateLayoutRequest, a, b);
    }
}
UpdateLayoutRequest.runtime = proto3;
UpdateLayoutRequest.typeName = "livekit.UpdateLayoutRequest";
UpdateLayoutRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "egress_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "layout", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.UpdateStreamRequest
 */
export class UpdateStreamRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string egress_id = 1;
         */
        this.egressId = "";
        /**
         * @generated from field: repeated string add_output_urls = 2;
         */
        this.addOutputUrls = [];
        /**
         * @generated from field: repeated string remove_output_urls = 3;
         */
        this.removeOutputUrls = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateStreamRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateStreamRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateStreamRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UpdateStreamRequest, a, b);
    }
}
UpdateStreamRequest.runtime = proto3;
UpdateStreamRequest.typeName = "livekit.UpdateStreamRequest";
UpdateStreamRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "egress_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "add_output_urls", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "remove_output_urls", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message livekit.ListEgressRequest
 */
export class ListEgressRequest extends Message {
    constructor(data) {
        super();
        /**
         * (optional, filter by room name)
         *
         * @generated from field: string room_name = 1;
         */
        this.roomName = "";
        /**
         * (optional, filter by egress ID)
         *
         * @generated from field: string egress_id = 2;
         */
        this.egressId = "";
        /**
         * (optional, list active egress only)
         *
         * @generated from field: bool active = 3;
         */
        this.active = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListEgressRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListEgressRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListEgressRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ListEgressRequest, a, b);
    }
}
ListEgressRequest.runtime = proto3;
ListEgressRequest.typeName = "livekit.ListEgressRequest";
ListEgressRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "room_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "egress_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message livekit.ListEgressResponse
 */
export class ListEgressResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated livekit.EgressInfo items = 1;
         */
        this.items = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListEgressResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListEgressResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListEgressResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ListEgressResponse, a, b);
    }
}
ListEgressResponse.runtime = proto3;
ListEgressResponse.typeName = "livekit.ListEgressResponse";
ListEgressResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: EgressInfo, repeated: true },
]);
/**
 * @generated from message livekit.StopEgressRequest
 */
export class StopEgressRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string egress_id = 1;
         */
        this.egressId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StopEgressRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StopEgressRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StopEgressRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(StopEgressRequest, a, b);
    }
}
StopEgressRequest.runtime = proto3;
StopEgressRequest.typeName = "livekit.StopEgressRequest";
StopEgressRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "egress_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.EgressInfo
 */
export class EgressInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string egress_id = 1;
         */
        this.egressId = "";
        /**
         * @generated from field: string room_id = 2;
         */
        this.roomId = "";
        /**
         * @generated from field: string room_name = 13;
         */
        this.roomName = "";
        /**
         * @generated from field: livekit.EgressStatus status = 3;
         */
        this.status = EgressStatus.EGRESS_STARTING;
        /**
         * @generated from field: int64 started_at = 10;
         */
        this.startedAt = protoInt64.zero;
        /**
         * @generated from field: int64 ended_at = 11;
         */
        this.endedAt = protoInt64.zero;
        /**
         * @generated from field: int64 updated_at = 18;
         */
        this.updatedAt = protoInt64.zero;
        /**
         * @generated from field: string error = 9;
         */
        this.error = "";
        /**
         * @generated from oneof livekit.EgressInfo.request
         */
        this.request = { case: undefined };
        /**
         * deprecated (use _result fields)
         *
         * @generated from oneof livekit.EgressInfo.result
         */
        this.result = { case: undefined };
        /**
         * @generated from field: repeated livekit.StreamInfo stream_results = 15;
         */
        this.streamResults = [];
        /**
         * @generated from field: repeated livekit.FileInfo file_results = 16;
         */
        this.fileResults = [];
        /**
         * @generated from field: repeated livekit.SegmentsInfo segment_results = 17;
         */
        this.segmentResults = [];
        /**
         * @generated from field: repeated livekit.ImagesInfo image_results = 20;
         */
        this.imageResults = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EgressInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EgressInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EgressInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EgressInfo, a, b);
    }
}
EgressInfo.runtime = proto3;
EgressInfo.typeName = "livekit.EgressInfo";
EgressInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "egress_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "room_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "status", kind: "enum", T: proto3.getEnumType(EgressStatus) },
    { no: 10, name: "started_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "ended_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "updated_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "room_composite", kind: "message", T: RoomCompositeEgressRequest, oneof: "request" },
    { no: 14, name: "web", kind: "message", T: WebEgressRequest, oneof: "request" },
    { no: 19, name: "participant", kind: "message", T: ParticipantEgressRequest, oneof: "request" },
    { no: 5, name: "track_composite", kind: "message", T: TrackCompositeEgressRequest, oneof: "request" },
    { no: 6, name: "track", kind: "message", T: TrackEgressRequest, oneof: "request" },
    { no: 7, name: "stream", kind: "message", T: StreamInfoList, oneof: "result" },
    { no: 8, name: "file", kind: "message", T: FileInfo, oneof: "result" },
    { no: 12, name: "segments", kind: "message", T: SegmentsInfo, oneof: "result" },
    { no: 15, name: "stream_results", kind: "message", T: StreamInfo, repeated: true },
    { no: 16, name: "file_results", kind: "message", T: FileInfo, repeated: true },
    { no: 17, name: "segment_results", kind: "message", T: SegmentsInfo, repeated: true },
    { no: 20, name: "image_results", kind: "message", T: ImagesInfo, repeated: true },
]);
/**
 * @generated from message livekit.StreamInfoList
 * @deprecated
 */
export class StreamInfoList extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated livekit.StreamInfo info = 1;
         */
        this.info = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StreamInfoList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StreamInfoList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StreamInfoList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(StreamInfoList, a, b);
    }
}
StreamInfoList.runtime = proto3;
StreamInfoList.typeName = "livekit.StreamInfoList";
StreamInfoList.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: StreamInfo, repeated: true },
]);
/**
 * @generated from message livekit.StreamInfo
 */
export class StreamInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string url = 1;
         */
        this.url = "";
        /**
         * @generated from field: int64 started_at = 2;
         */
        this.startedAt = protoInt64.zero;
        /**
         * @generated from field: int64 ended_at = 3;
         */
        this.endedAt = protoInt64.zero;
        /**
         * @generated from field: int64 duration = 4;
         */
        this.duration = protoInt64.zero;
        /**
         * @generated from field: livekit.StreamInfo.Status status = 5;
         */
        this.status = StreamInfo_Status.ACTIVE;
        /**
         * @generated from field: string error = 6;
         */
        this.error = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StreamInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StreamInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StreamInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(StreamInfo, a, b);
    }
}
StreamInfo.runtime = proto3;
StreamInfo.typeName = "livekit.StreamInfo";
StreamInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "started_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ended_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "duration", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "status", kind: "enum", T: proto3.getEnumType(StreamInfo_Status) },
    { no: 6, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from enum livekit.StreamInfo.Status
 */
export var StreamInfo_Status;
(function (StreamInfo_Status) {
    /**
     * @generated from enum value: ACTIVE = 0;
     */
    StreamInfo_Status[StreamInfo_Status["ACTIVE"] = 0] = "ACTIVE";
    /**
     * @generated from enum value: FINISHED = 1;
     */
    StreamInfo_Status[StreamInfo_Status["FINISHED"] = 1] = "FINISHED";
    /**
     * @generated from enum value: FAILED = 2;
     */
    StreamInfo_Status[StreamInfo_Status["FAILED"] = 2] = "FAILED";
})(StreamInfo_Status || (StreamInfo_Status = {}));
// Retrieve enum metadata with: proto3.getEnumType(StreamInfo_Status)
proto3.util.setEnumType(StreamInfo_Status, "livekit.StreamInfo.Status", [
    { no: 0, name: "ACTIVE" },
    { no: 1, name: "FINISHED" },
    { no: 2, name: "FAILED" },
]);
/**
 * @generated from message livekit.FileInfo
 */
export class FileInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string filename = 1;
         */
        this.filename = "";
        /**
         * @generated from field: int64 started_at = 2;
         */
        this.startedAt = protoInt64.zero;
        /**
         * @generated from field: int64 ended_at = 3;
         */
        this.endedAt = protoInt64.zero;
        /**
         * @generated from field: int64 duration = 6;
         */
        this.duration = protoInt64.zero;
        /**
         * @generated from field: int64 size = 4;
         */
        this.size = protoInt64.zero;
        /**
         * @generated from field: string location = 5;
         */
        this.location = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FileInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FileInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FileInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FileInfo, a, b);
    }
}
FileInfo.runtime = proto3;
FileInfo.typeName = "livekit.FileInfo";
FileInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "started_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ended_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "duration", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.SegmentsInfo
 */
export class SegmentsInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string playlist_name = 1;
         */
        this.playlistName = "";
        /**
         * @generated from field: string live_playlist_name = 8;
         */
        this.livePlaylistName = "";
        /**
         * @generated from field: int64 duration = 2;
         */
        this.duration = protoInt64.zero;
        /**
         * @generated from field: int64 size = 3;
         */
        this.size = protoInt64.zero;
        /**
         * @generated from field: string playlist_location = 4;
         */
        this.playlistLocation = "";
        /**
         * @generated from field: string live_playlist_location = 9;
         */
        this.livePlaylistLocation = "";
        /**
         * @generated from field: int64 segment_count = 5;
         */
        this.segmentCount = protoInt64.zero;
        /**
         * @generated from field: int64 started_at = 6;
         */
        this.startedAt = protoInt64.zero;
        /**
         * @generated from field: int64 ended_at = 7;
         */
        this.endedAt = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SegmentsInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SegmentsInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SegmentsInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SegmentsInfo, a, b);
    }
}
SegmentsInfo.runtime = proto3;
SegmentsInfo.typeName = "livekit.SegmentsInfo";
SegmentsInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "playlist_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "live_playlist_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "duration", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "playlist_location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "live_playlist_location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "segment_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "started_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "ended_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * @generated from message livekit.ImagesInfo
 */
export class ImagesInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int64 image_count = 1;
         */
        this.imageCount = protoInt64.zero;
        /**
         * @generated from field: int64 started_at = 2;
         */
        this.startedAt = protoInt64.zero;
        /**
         * @generated from field: int64 ended_at = 3;
         */
        this.endedAt = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ImagesInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ImagesInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ImagesInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ImagesInfo, a, b);
    }
}
ImagesInfo.runtime = proto3;
ImagesInfo.typeName = "livekit.ImagesInfo";
ImagesInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "image_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "started_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ended_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * @generated from message livekit.AutoParticipantEgress
 */
export class AutoParticipantEgress extends Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof livekit.AutoParticipantEgress.options
         */
        this.options = { case: undefined };
        /**
         * @generated from field: repeated livekit.EncodedFileOutput file_outputs = 3;
         */
        this.fileOutputs = [];
        /**
         * @generated from field: repeated livekit.SegmentedFileOutput segment_outputs = 4;
         */
        this.segmentOutputs = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AutoParticipantEgress().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AutoParticipantEgress().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AutoParticipantEgress().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AutoParticipantEgress, a, b);
    }
}
AutoParticipantEgress.runtime = proto3;
AutoParticipantEgress.typeName = "livekit.AutoParticipantEgress";
AutoParticipantEgress.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "preset", kind: "enum", T: proto3.getEnumType(EncodingOptionsPreset), oneof: "options" },
    { no: 2, name: "advanced", kind: "message", T: EncodingOptions, oneof: "options" },
    { no: 3, name: "file_outputs", kind: "message", T: EncodedFileOutput, repeated: true },
    { no: 4, name: "segment_outputs", kind: "message", T: SegmentedFileOutput, repeated: true },
]);
/**
 * @generated from message livekit.AutoTrackEgress
 */
export class AutoTrackEgress extends Message {
    constructor(data) {
        super();
        /**
         * see docs for templating (default {track_id}-{time})
         *
         * @generated from field: string filepath = 1;
         */
        this.filepath = "";
        /**
         * disables upload of json manifest file (default false)
         *
         * @generated from field: bool disable_manifest = 5;
         */
        this.disableManifest = false;
        /**
         * @generated from oneof livekit.AutoTrackEgress.output
         */
        this.output = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AutoTrackEgress().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AutoTrackEgress().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AutoTrackEgress().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AutoTrackEgress, a, b);
    }
}
AutoTrackEgress.runtime = proto3;
AutoTrackEgress.typeName = "livekit.AutoTrackEgress";
AutoTrackEgress.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "filepath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "disable_manifest", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "s3", kind: "message", T: S3Upload, oneof: "output" },
    { no: 3, name: "gcp", kind: "message", T: GCPUpload, oneof: "output" },
    { no: 4, name: "azure", kind: "message", T: AzureBlobUpload, oneof: "output" },
]);
//# sourceMappingURL=livekit_egress_pb.js.map